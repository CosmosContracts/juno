syntax = "proto3";
package osmosis.tokenfactory.v1beta1;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/bank/v1beta1/bank.proto";
import "osmosis/tokenfactory/v1beta1/params.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/CosmosContracts/juno/x/tokenfactory/types";

// Msg defines the tokefactory module's gRPC message service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // CreateDenom creates a new native functional token and adds the creator as sole admin.
  rpc CreateDenom(MsgCreateDenom) returns (MsgCreateDenomResponse);
  // Mint allows an admin account to mint supply of a token.
  rpc Mint(MsgMint) returns (MsgMintResponse);
  // Burn allows an admin account to burn supply of a token.
  rpc Burn(MsgBurn) returns (MsgBurnResponse);
  // ChangeAdmin allows an admin account to reassign adminship of a denom to another account.
  rpc ChangeAdmin(MsgChangeAdmin) returns (MsgChangeAdminResponse);
  // SetDenomMetadata allows an admin account to set the denom's bank metadata.
  rpc SetDenomMetadata(MsgSetDenomMetadata) returns (MsgSetDenomMetadataResponse);
  // ForceTransfer allows an admin account to transfer a token from one account to another.
  rpc ForceTransfer(MsgForceTransfer) returns (MsgForceTransferResponse);
  // UpdateParams defines a governance operation for updating the x/tokenfactory module
  // parameters. The authority is hard-coded to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCreateDenom defines the message structure for the CreateDenom gRPC service
// method. It allows an account to create a new denom. It requires a sender
// address and a sub denomination. The (sender_address, sub_denomination) tuple
// must be unique and cannot be re-used.
//
// The resulting denom created is defined as
// <factory/{creatorAddress}/{subdenom}>. The resulting denom's admin is
// originally set to be the creator, but this can be changed later. The token
// denom does not indicate the current admin.
message MsgCreateDenom {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name)           = "juno/x/tokenfactory/MsgCreateDenom";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // subdenom can be up to 44 "alphanumeric" characters long.
  string subdenom = 2;
}

// MsgCreateDenomResponse is the return value of MsgCreateDenom
// It returns the full string of the newly created denom
message MsgCreateDenomResponse {
  string new_token_denom = 1;
}

// MsgMint is the sdk.Msg type for allowing an admin account to mint
// more of a token.  For now, we only support minting to the sender account
message MsgMint {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name)           = "juno/x/tokenfactory/MsgMint";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
  string mint_to_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgMintResponse defines the response structure for an executed
// MsgMint message.
message MsgMintResponse {}

// MsgBurn is the sdk.Msg type for allowing an admin account to burn
// a token.  For now, we only support burning from the sender account.
message MsgBurn {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name)           = "juno/x/tokenfactory/MsgBurn";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
  string burn_from_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgBurnResponse defines the response structure for an executed
// MsgBurn message.
message MsgBurnResponse {}

// MsgChangeAdmin is the sdk.Msg type for allowing an admin account to reassign
// adminship of a denom to a new account
message MsgChangeAdmin {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name)           = "juno/x/tokenfactory/MsgChangeAdmin";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string denom = 2;
  string new_admin = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgChangeAdminResponse defines the response structure for an executed
// MsgChangeAdmin message.
message MsgChangeAdminResponse {}

// MsgSetDenomMetadata is the sdk.Msg type for allowing an admin account to set
// the denom's bank metadata
message MsgSetDenomMetadata {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name)           = "juno/x/tokenfactory/MsgSetDenomMetadata";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.bank.v1beta1.Metadata metadata = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgSetDenomMetadataResponse defines the response structure for an executed
// MsgSetDenomMetadata message.
message MsgSetDenomMetadataResponse {}

// MsgForceTransfer is the sdk.Msg type for allowing an admin account to
// forcefully transfer a token from one account to another
message MsgForceTransfer {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name)           = "juno/x/tokenfactory/MsgForceTransfer";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
  string transfer_from_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string transfer_to_address = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgForceTransferResponse defines the response structure for an executed
// MsgForceTransfer message.
message MsgForceTransferResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name)           = "juno/x/tokenfactory/MsgUpdateParams";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the x/mint parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}
