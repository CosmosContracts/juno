// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: juno/stream/v1/query.proto

package streamv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Query_StreamBalance_FullMethodName              = "/juno.stream.v1.Query/StreamBalance"
	Query_StreamAllBalances_FullMethodName          = "/juno.stream.v1.Query/StreamAllBalances"
	Query_StreamDelegations_FullMethodName          = "/juno.stream.v1.Query/StreamDelegations"
	Query_StreamDelegation_FullMethodName           = "/juno.stream.v1.Query/StreamDelegation"
	Query_StreamUnbondingDelegations_FullMethodName = "/juno.stream.v1.Query/StreamUnbondingDelegations"
	Query_StreamUnbondingDelegation_FullMethodName  = "/juno.stream.v1.Query/StreamUnbondingDelegation"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	StreamBalance(ctx context.Context, in *StreamBalanceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamBalanceResponse], error)
	StreamAllBalances(ctx context.Context, in *StreamAllBalancesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamAllBalancesResponse], error)
	StreamDelegations(ctx context.Context, in *StreamDelegationsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamDelegationsResponse], error)
	StreamDelegation(ctx context.Context, in *StreamDelegationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamDelegationResponse], error)
	StreamUnbondingDelegations(ctx context.Context, in *StreamUnbondingDelegationsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamUnbondingDelegationsResponse], error)
	StreamUnbondingDelegation(ctx context.Context, in *StreamUnbondingDelegationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamUnbondingDelegationResponse], error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) StreamBalance(ctx context.Context, in *StreamBalanceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamBalanceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Query_ServiceDesc.Streams[0], Query_StreamBalance_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamBalanceRequest, StreamBalanceResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Query_StreamBalanceClient = grpc.ServerStreamingClient[StreamBalanceResponse]

func (c *queryClient) StreamAllBalances(ctx context.Context, in *StreamAllBalancesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamAllBalancesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Query_ServiceDesc.Streams[1], Query_StreamAllBalances_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamAllBalancesRequest, StreamAllBalancesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Query_StreamAllBalancesClient = grpc.ServerStreamingClient[StreamAllBalancesResponse]

func (c *queryClient) StreamDelegations(ctx context.Context, in *StreamDelegationsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamDelegationsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Query_ServiceDesc.Streams[2], Query_StreamDelegations_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamDelegationsRequest, StreamDelegationsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Query_StreamDelegationsClient = grpc.ServerStreamingClient[StreamDelegationsResponse]

func (c *queryClient) StreamDelegation(ctx context.Context, in *StreamDelegationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamDelegationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Query_ServiceDesc.Streams[3], Query_StreamDelegation_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamDelegationRequest, StreamDelegationResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Query_StreamDelegationClient = grpc.ServerStreamingClient[StreamDelegationResponse]

func (c *queryClient) StreamUnbondingDelegations(ctx context.Context, in *StreamUnbondingDelegationsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamUnbondingDelegationsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Query_ServiceDesc.Streams[4], Query_StreamUnbondingDelegations_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamUnbondingDelegationsRequest, StreamUnbondingDelegationsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Query_StreamUnbondingDelegationsClient = grpc.ServerStreamingClient[StreamUnbondingDelegationsResponse]

func (c *queryClient) StreamUnbondingDelegation(ctx context.Context, in *StreamUnbondingDelegationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamUnbondingDelegationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Query_ServiceDesc.Streams[5], Query_StreamUnbondingDelegation_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamUnbondingDelegationRequest, StreamUnbondingDelegationResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Query_StreamUnbondingDelegationClient = grpc.ServerStreamingClient[StreamUnbondingDelegationResponse]

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility.
type QueryServer interface {
	StreamBalance(*StreamBalanceRequest, grpc.ServerStreamingServer[StreamBalanceResponse]) error
	StreamAllBalances(*StreamAllBalancesRequest, grpc.ServerStreamingServer[StreamAllBalancesResponse]) error
	StreamDelegations(*StreamDelegationsRequest, grpc.ServerStreamingServer[StreamDelegationsResponse]) error
	StreamDelegation(*StreamDelegationRequest, grpc.ServerStreamingServer[StreamDelegationResponse]) error
	StreamUnbondingDelegations(*StreamUnbondingDelegationsRequest, grpc.ServerStreamingServer[StreamUnbondingDelegationsResponse]) error
	StreamUnbondingDelegation(*StreamUnbondingDelegationRequest, grpc.ServerStreamingServer[StreamUnbondingDelegationResponse]) error
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServer struct{}

func (UnimplementedQueryServer) StreamBalance(*StreamBalanceRequest, grpc.ServerStreamingServer[StreamBalanceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamBalance not implemented")
}
func (UnimplementedQueryServer) StreamAllBalances(*StreamAllBalancesRequest, grpc.ServerStreamingServer[StreamAllBalancesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamAllBalances not implemented")
}
func (UnimplementedQueryServer) StreamDelegations(*StreamDelegationsRequest, grpc.ServerStreamingServer[StreamDelegationsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamDelegations not implemented")
}
func (UnimplementedQueryServer) StreamDelegation(*StreamDelegationRequest, grpc.ServerStreamingServer[StreamDelegationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamDelegation not implemented")
}
func (UnimplementedQueryServer) StreamUnbondingDelegations(*StreamUnbondingDelegationsRequest, grpc.ServerStreamingServer[StreamUnbondingDelegationsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamUnbondingDelegations not implemented")
}
func (UnimplementedQueryServer) StreamUnbondingDelegation(*StreamUnbondingDelegationRequest, grpc.ServerStreamingServer[StreamUnbondingDelegationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamUnbondingDelegation not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}
func (UnimplementedQueryServer) testEmbeddedByValue()               {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	// If the following call pancis, it indicates UnimplementedQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_StreamBalance_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamBalanceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).StreamBalance(m, &grpc.GenericServerStream[StreamBalanceRequest, StreamBalanceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Query_StreamBalanceServer = grpc.ServerStreamingServer[StreamBalanceResponse]

func _Query_StreamAllBalances_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAllBalancesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).StreamAllBalances(m, &grpc.GenericServerStream[StreamAllBalancesRequest, StreamAllBalancesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Query_StreamAllBalancesServer = grpc.ServerStreamingServer[StreamAllBalancesResponse]

func _Query_StreamDelegations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDelegationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).StreamDelegations(m, &grpc.GenericServerStream[StreamDelegationsRequest, StreamDelegationsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Query_StreamDelegationsServer = grpc.ServerStreamingServer[StreamDelegationsResponse]

func _Query_StreamDelegation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDelegationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).StreamDelegation(m, &grpc.GenericServerStream[StreamDelegationRequest, StreamDelegationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Query_StreamDelegationServer = grpc.ServerStreamingServer[StreamDelegationResponse]

func _Query_StreamUnbondingDelegations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamUnbondingDelegationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).StreamUnbondingDelegations(m, &grpc.GenericServerStream[StreamUnbondingDelegationsRequest, StreamUnbondingDelegationsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Query_StreamUnbondingDelegationsServer = grpc.ServerStreamingServer[StreamUnbondingDelegationsResponse]

func _Query_StreamUnbondingDelegation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamUnbondingDelegationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServer).StreamUnbondingDelegation(m, &grpc.GenericServerStream[StreamUnbondingDelegationRequest, StreamUnbondingDelegationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Query_StreamUnbondingDelegationServer = grpc.ServerStreamingServer[StreamUnbondingDelegationResponse]

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "juno.stream.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBalance",
			Handler:       _Query_StreamBalance_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamAllBalances",
			Handler:       _Query_StreamAllBalances_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamDelegations",
			Handler:       _Query_StreamDelegations_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamDelegation",
			Handler:       _Query_StreamDelegation_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamUnbondingDelegations",
			Handler:       _Query_StreamUnbondingDelegations_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamUnbondingDelegation",
			Handler:       _Query_StreamUnbondingDelegation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "juno/stream/v1/query.proto",
}
