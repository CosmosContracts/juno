// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: juno/feepay/v1/query.proto

package feepayv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Query_FeePayContract_FullMethodName         = "/juno.feepay.v1.Query/FeePayContract"
	Query_FeePayContracts_FullMethodName        = "/juno.feepay.v1.Query/FeePayContracts"
	Query_FeePayContractUses_FullMethodName     = "/juno.feepay.v1.Query/FeePayContractUses"
	Query_FeePayWalletIsEligible_FullMethodName = "/juno.feepay.v1.Query/FeePayWalletIsEligible"
	Query_Params_FullMethodName                 = "/juno.feepay.v1.Query/Params"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Query defines the gRPC querier service.
type QueryClient interface {
	// FeePayContract queries a single fee pay contract by address
	FeePayContract(ctx context.Context, in *QueryFeePayContractRequest, opts ...grpc.CallOption) (*QueryFeePayContractResponse, error)
	// Retrieve all fee pay contracts
	FeePayContracts(ctx context.Context, in *QueryFeePayContractsRequest, opts ...grpc.CallOption) (*QueryFeePayContractsResponse, error)
	// Retrieve the number of uses on a fee pay contract by wallet
	FeePayContractUses(ctx context.Context, in *QueryFeePayContractUsesRequest, opts ...grpc.CallOption) (*QueryFeePayContractUsesResponse, error)
	// Query if sender is eligible for fee pay contract interaction
	FeePayWalletIsEligible(ctx context.Context, in *QueryFeePayWalletIsEligibleRequest, opts ...grpc.CallOption) (*QueryFeePayWalletIsEligibleResponse, error)
	// Params retrieves the FeePay module params
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) FeePayContract(ctx context.Context, in *QueryFeePayContractRequest, opts ...grpc.CallOption) (*QueryFeePayContractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFeePayContractResponse)
	err := c.cc.Invoke(ctx, Query_FeePayContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeePayContracts(ctx context.Context, in *QueryFeePayContractsRequest, opts ...grpc.CallOption) (*QueryFeePayContractsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFeePayContractsResponse)
	err := c.cc.Invoke(ctx, Query_FeePayContracts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeePayContractUses(ctx context.Context, in *QueryFeePayContractUsesRequest, opts ...grpc.CallOption) (*QueryFeePayContractUsesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFeePayContractUsesResponse)
	err := c.cc.Invoke(ctx, Query_FeePayContractUses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeePayWalletIsEligible(ctx context.Context, in *QueryFeePayWalletIsEligibleRequest, opts ...grpc.CallOption) (*QueryFeePayWalletIsEligibleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFeePayWalletIsEligibleResponse)
	err := c.cc.Invoke(ctx, Query_FeePayWalletIsEligible_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility.
//
// Query defines the gRPC querier service.
type QueryServer interface {
	// FeePayContract queries a single fee pay contract by address
	FeePayContract(context.Context, *QueryFeePayContractRequest) (*QueryFeePayContractResponse, error)
	// Retrieve all fee pay contracts
	FeePayContracts(context.Context, *QueryFeePayContractsRequest) (*QueryFeePayContractsResponse, error)
	// Retrieve the number of uses on a fee pay contract by wallet
	FeePayContractUses(context.Context, *QueryFeePayContractUsesRequest) (*QueryFeePayContractUsesResponse, error)
	// Query if sender is eligible for fee pay contract interaction
	FeePayWalletIsEligible(context.Context, *QueryFeePayWalletIsEligibleRequest) (*QueryFeePayWalletIsEligibleResponse, error)
	// Params retrieves the FeePay module params
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServer struct{}

func (UnimplementedQueryServer) FeePayContract(context.Context, *QueryFeePayContractRequest) (*QueryFeePayContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeePayContract not implemented")
}
func (UnimplementedQueryServer) FeePayContracts(context.Context, *QueryFeePayContractsRequest) (*QueryFeePayContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeePayContracts not implemented")
}
func (UnimplementedQueryServer) FeePayContractUses(context.Context, *QueryFeePayContractUsesRequest) (*QueryFeePayContractUsesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeePayContractUses not implemented")
}
func (UnimplementedQueryServer) FeePayWalletIsEligible(context.Context, *QueryFeePayWalletIsEligibleRequest) (*QueryFeePayWalletIsEligibleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeePayWalletIsEligible not implemented")
}
func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}
func (UnimplementedQueryServer) testEmbeddedByValue()               {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	// If the following call pancis, it indicates UnimplementedQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_FeePayContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeePayContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeePayContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FeePayContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeePayContract(ctx, req.(*QueryFeePayContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeePayContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeePayContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeePayContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FeePayContracts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeePayContracts(ctx, req.(*QueryFeePayContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeePayContractUses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeePayContractUsesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeePayContractUses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FeePayContractUses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeePayContractUses(ctx, req.(*QueryFeePayContractUsesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeePayWalletIsEligible_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeePayWalletIsEligibleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeePayWalletIsEligible(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FeePayWalletIsEligible_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeePayWalletIsEligible(ctx, req.(*QueryFeePayWalletIsEligibleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "juno.feepay.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FeePayContract",
			Handler:    _Query_FeePayContract_Handler,
		},
		{
			MethodName: "FeePayContracts",
			Handler:    _Query_FeePayContracts_Handler,
		},
		{
			MethodName: "FeePayContractUses",
			Handler:    _Query_FeePayContractUses_Handler,
		},
		{
			MethodName: "FeePayWalletIsEligible",
			Handler:    _Query_FeePayWalletIsEligible_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "juno/feepay/v1/query.proto",
}
