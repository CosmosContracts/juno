// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: juno/cwhooks/v1/tx.proto

package cwhooksv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Msg_UpdateParams_FullMethodName         = "/juno.cwhooks.v1.Msg/UpdateParams"
	Msg_RegisterStaking_FullMethodName      = "/juno.cwhooks.v1.Msg/RegisterStaking"
	Msg_UnregisterStaking_FullMethodName    = "/juno.cwhooks.v1.Msg/UnregisterStaking"
	Msg_RegisterGovernance_FullMethodName   = "/juno.cwhooks.v1.Msg/RegisterGovernance"
	Msg_UnregisterGovernance_FullMethodName = "/juno.cwhooks.v1.Msg/UnregisterGovernance"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Msg defines the Msg service.
type MsgClient interface {
	// UpdateParams defines a governance operation for updating the x/clock module
	// parameters. The authority is hard-coded to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// RegisterStaking.
	RegisterStaking(ctx context.Context, in *MsgRegisterStaking, opts ...grpc.CallOption) (*MsgRegisterStakingResponse, error)
	// UnregisterStaking.
	UnregisterStaking(ctx context.Context, in *MsgUnregisterStaking, opts ...grpc.CallOption) (*MsgUnregisterStakingResponse, error)
	// RegisterGovernance.
	RegisterGovernance(ctx context.Context, in *MsgRegisterGovernance, opts ...grpc.CallOption) (*MsgRegisterGovernanceResponse, error)
	// UnregisterGovernance.
	UnregisterGovernance(ctx context.Context, in *MsgUnregisterGovernance, opts ...grpc.CallOption) (*MsgUnregisterGovernanceResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterStaking(ctx context.Context, in *MsgRegisterStaking, opts ...grpc.CallOption) (*MsgRegisterStakingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgRegisterStakingResponse)
	err := c.cc.Invoke(ctx, Msg_RegisterStaking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnregisterStaking(ctx context.Context, in *MsgUnregisterStaking, opts ...grpc.CallOption) (*MsgUnregisterStakingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUnregisterStakingResponse)
	err := c.cc.Invoke(ctx, Msg_UnregisterStaking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterGovernance(ctx context.Context, in *MsgRegisterGovernance, opts ...grpc.CallOption) (*MsgRegisterGovernanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgRegisterGovernanceResponse)
	err := c.cc.Invoke(ctx, Msg_RegisterGovernance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnregisterGovernance(ctx context.Context, in *MsgUnregisterGovernance, opts ...grpc.CallOption) (*MsgUnregisterGovernanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUnregisterGovernanceResponse)
	err := c.cc.Invoke(ctx, Msg_UnregisterGovernance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility.
//
// Msg defines the Msg service.
type MsgServer interface {
	// UpdateParams defines a governance operation for updating the x/clock module
	// parameters. The authority is hard-coded to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// RegisterStaking.
	RegisterStaking(context.Context, *MsgRegisterStaking) (*MsgRegisterStakingResponse, error)
	// UnregisterStaking.
	UnregisterStaking(context.Context, *MsgUnregisterStaking) (*MsgUnregisterStakingResponse, error)
	// RegisterGovernance.
	RegisterGovernance(context.Context, *MsgRegisterGovernance) (*MsgRegisterGovernanceResponse, error)
	// UnregisterGovernance.
	UnregisterGovernance(context.Context, *MsgUnregisterGovernance) (*MsgUnregisterGovernanceResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMsgServer struct{}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) RegisterStaking(context.Context, *MsgRegisterStaking) (*MsgRegisterStakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterStaking not implemented")
}
func (UnimplementedMsgServer) UnregisterStaking(context.Context, *MsgUnregisterStaking) (*MsgUnregisterStakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterStaking not implemented")
}
func (UnimplementedMsgServer) RegisterGovernance(context.Context, *MsgRegisterGovernance) (*MsgRegisterGovernanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGovernance not implemented")
}
func (UnimplementedMsgServer) UnregisterGovernance(context.Context, *MsgUnregisterGovernance) (*MsgUnregisterGovernanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterGovernance not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}
func (UnimplementedMsgServer) testEmbeddedByValue()             {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	// If the following call pancis, it indicates UnimplementedMsgServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterStaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterStaking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterStaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RegisterStaking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterStaking(ctx, req.(*MsgRegisterStaking))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnregisterStaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnregisterStaking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnregisterStaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UnregisterStaking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnregisterStaking(ctx, req.(*MsgUnregisterStaking))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterGovernance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterGovernance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterGovernance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RegisterGovernance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterGovernance(ctx, req.(*MsgRegisterGovernance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnregisterGovernance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnregisterGovernance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnregisterGovernance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UnregisterGovernance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnregisterGovernance(ctx, req.(*MsgUnregisterGovernance))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "juno.cwhooks.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "RegisterStaking",
			Handler:    _Msg_RegisterStaking_Handler,
		},
		{
			MethodName: "UnregisterStaking",
			Handler:    _Msg_UnregisterStaking_Handler,
		},
		{
			MethodName: "RegisterGovernance",
			Handler:    _Msg_RegisterGovernance_Handler,
		},
		{
			MethodName: "UnregisterGovernance",
			Handler:    _Msg_UnregisterGovernance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "juno/cwhooks/v1/tx.proto",
}
