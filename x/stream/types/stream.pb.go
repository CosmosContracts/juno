// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: juno/stream/v1/stream.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StreamEvent represents a state change event from the blockchain
type StreamEvent struct {
	// module indicates which module generated the event (bank, staking, etc.)
	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// event_type indicates the type of event (balance_change, delegation_change, etc.)
	EventType string `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// address is the primary address affected by the change
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// secondary_address is an optional secondary address (e.g., validator address for delegations)
	SecondaryAddress string `protobuf:"bytes,4,opt,name=secondary_address,json=secondaryAddress,proto3" json:"secondary_address,omitempty"`
	// denom is the denomination for token-related events
	Denom string `protobuf:"bytes,5,opt,name=denom,proto3" json:"denom,omitempty"`
	// block_height indicates at which block height the event occurred
	BlockHeight int64 `protobuf:"varint,6,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *StreamEvent) Reset()         { *m = StreamEvent{} }
func (m *StreamEvent) String() string { return proto.CompactTextString(m) }
func (*StreamEvent) ProtoMessage()    {}
func (*StreamEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5691c35242a176a, []int{0}
}
func (m *StreamEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamEvent.Merge(m, src)
}
func (m *StreamEvent) XXX_Size() int {
	return m.Size()
}
func (m *StreamEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StreamEvent proto.InternalMessageInfo

func (m *StreamEvent) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *StreamEvent) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *StreamEvent) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *StreamEvent) GetSecondaryAddress() string {
	if m != nil {
		return m.SecondaryAddress
	}
	return ""
}

func (m *StreamEvent) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *StreamEvent) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// SubscriptionKey uniquely identifies a subscription
type SubscriptionKey struct {
	// subscription_type indicates the type of subscription (balance, delegation, etc.)
	SubscriptionType string `protobuf:"bytes,1,opt,name=subscription_type,json=subscriptionType,proto3" json:"subscription_type,omitempty"`
	// address is the primary address to monitor
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// secondary_address is an optional secondary address filter
	SecondaryAddress string `protobuf:"bytes,3,opt,name=secondary_address,json=secondaryAddress,proto3" json:"secondary_address,omitempty"`
	// denom is an optional denomination filter
	Denom string `protobuf:"bytes,4,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *SubscriptionKey) Reset()         { *m = SubscriptionKey{} }
func (m *SubscriptionKey) String() string { return proto.CompactTextString(m) }
func (*SubscriptionKey) ProtoMessage()    {}
func (*SubscriptionKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5691c35242a176a, []int{1}
}
func (m *SubscriptionKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscriptionKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscriptionKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscriptionKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionKey.Merge(m, src)
}
func (m *SubscriptionKey) XXX_Size() int {
	return m.Size()
}
func (m *SubscriptionKey) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionKey.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionKey proto.InternalMessageInfo

func (m *SubscriptionKey) GetSubscriptionType() string {
	if m != nil {
		return m.SubscriptionType
	}
	return ""
}

func (m *SubscriptionKey) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SubscriptionKey) GetSecondaryAddress() string {
	if m != nil {
		return m.SecondaryAddress
	}
	return ""
}

func (m *SubscriptionKey) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// StreamListener represents the configuration for a state listener
type StreamListener struct {
	// module_name indicates which module this listener monitors
	ModuleName string `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	// store_key is the store key to listen to
	StoreKey string `protobuf:"bytes,2,opt,name=store_key,json=storeKey,proto3" json:"store_key,omitempty"`
	// key_prefixes are the specific key prefixes to monitor
	KeyPrefixes [][]byte `protobuf:"bytes,3,rep,name=key_prefixes,json=keyPrefixes,proto3" json:"key_prefixes,omitempty"`
}

func (m *StreamListener) Reset()         { *m = StreamListener{} }
func (m *StreamListener) String() string { return proto.CompactTextString(m) }
func (*StreamListener) ProtoMessage()    {}
func (*StreamListener) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5691c35242a176a, []int{2}
}
func (m *StreamListener) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamListener) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamListener.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamListener) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamListener.Merge(m, src)
}
func (m *StreamListener) XXX_Size() int {
	return m.Size()
}
func (m *StreamListener) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamListener.DiscardUnknown(m)
}

var xxx_messageInfo_StreamListener proto.InternalMessageInfo

func (m *StreamListener) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *StreamListener) GetStoreKey() string {
	if m != nil {
		return m.StoreKey
	}
	return ""
}

func (m *StreamListener) GetKeyPrefixes() [][]byte {
	if m != nil {
		return m.KeyPrefixes
	}
	return nil
}

func init() {
	proto.RegisterType((*StreamEvent)(nil), "juno.stream.v1.StreamEvent")
	proto.RegisterType((*SubscriptionKey)(nil), "juno.stream.v1.SubscriptionKey")
	proto.RegisterType((*StreamListener)(nil), "juno.stream.v1.StreamListener")
}

func init() { proto.RegisterFile("juno/stream/v1/stream.proto", fileDescriptor_c5691c35242a176a) }

var fileDescriptor_c5691c35242a176a = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x6b, 0xe2, 0x40,
	0x18, 0xc6, 0x1d, 0xa3, 0xee, 0x3a, 0x11, 0x77, 0x77, 0x58, 0x96, 0x80, 0x6c, 0xaa, 0x9e, 0x84,
	0x42, 0x82, 0xf4, 0x13, 0xb4, 0x52, 0x10, 0x5a, 0x4a, 0xd1, 0x9e, 0x7a, 0x09, 0xf9, 0xf3, 0x56,
	0xd3, 0x98, 0x99, 0x74, 0x66, 0x22, 0xe6, 0x5b, 0xf4, 0xde, 0xaf, 0xd3, 0x43, 0x8f, 0x1e, 0x7b,
	0x2c, 0xfa, 0x45, 0x4a, 0x26, 0x49, 0x91, 0x5e, 0xda, 0xdb, 0xbc, 0xbf, 0xe7, 0x81, 0x79, 0x9e,
	0x97, 0x17, 0xf7, 0xee, 0x53, 0xca, 0x6c, 0x21, 0x39, 0xb8, 0xb1, 0xbd, 0x1e, 0x97, 0x2f, 0x2b,
	0xe1, 0x4c, 0x32, 0xd2, 0xcd, 0x45, 0xab, 0x44, 0xeb, 0xf1, 0xf0, 0x19, 0x61, 0x7d, 0xae, 0xa6,
	0xf3, 0x35, 0x50, 0x49, 0xfe, 0xe1, 0x56, 0xcc, 0x82, 0x74, 0x05, 0x06, 0xea, 0xa3, 0x51, 0x7b,
	0x56, 0x4e, 0xe4, 0x3f, 0xc6, 0x90, 0x1b, 0x1c, 0x99, 0x25, 0x60, 0xd4, 0x95, 0xd6, 0x56, 0xe4,
	0x26, 0x4b, 0x80, 0x18, 0xf8, 0x87, 0x1b, 0x04, 0x1c, 0x84, 0x30, 0x34, 0xa5, 0x55, 0x23, 0x39,
	0xc6, 0x7f, 0x04, 0xf8, 0x8c, 0x06, 0x2e, 0xcf, 0x9c, 0xca, 0xd3, 0x50, 0x9e, 0xdf, 0x1f, 0xc2,
	0x69, 0x69, 0xfe, 0x8b, 0x9b, 0x01, 0x50, 0x16, 0x1b, 0x4d, 0x65, 0x28, 0x06, 0x32, 0xc0, 0x1d,
	0x6f, 0xc5, 0xfc, 0xc8, 0x59, 0x42, 0xb8, 0x58, 0x4a, 0xa3, 0xd5, 0x47, 0x23, 0x6d, 0xa6, 0x2b,
	0x36, 0x55, 0x68, 0xf8, 0x84, 0xf0, 0xaf, 0x79, 0xea, 0x09, 0x9f, 0x87, 0x89, 0x0c, 0x19, 0xbd,
	0x80, 0x4c, 0xfd, 0x7c, 0x80, 0x8a, 0xe4, 0xa8, 0xfc, 0xf9, 0x40, 0xf8, 0x5c, 0xa0, 0xfe, 0x8d,
	0x02, 0xda, 0x57, 0x05, 0x1a, 0x07, 0x05, 0x86, 0x0f, 0xb8, 0x5b, 0xec, 0xf8, 0x32, 0x14, 0x12,
	0x28, 0x70, 0x72, 0x84, 0xf5, 0x62, 0xb1, 0x0e, 0x75, 0xe3, 0x2a, 0x15, 0x2e, 0xd0, 0x95, 0x1b,
	0x03, 0xe9, 0xe1, 0xb6, 0x90, 0x8c, 0x83, 0x13, 0x41, 0x56, 0x26, 0xfa, 0xa9, 0x40, 0xde, 0x6c,
	0x80, 0x3b, 0x11, 0x64, 0x4e, 0xc2, 0xe1, 0x2e, 0xdc, 0x40, 0x9e, 0x46, 0x1b, 0x75, 0x66, 0x7a,
	0x04, 0xd9, 0x75, 0x89, 0xce, 0xa6, 0x2f, 0x3b, 0x13, 0x6d, 0x77, 0x26, 0x7a, 0xdb, 0x99, 0xe8,
	0x71, 0x6f, 0xd6, 0xb6, 0x7b, 0xb3, 0xf6, 0xba, 0x37, 0x6b, 0xb7, 0xd6, 0x22, 0x94, 0xcb, 0xd4,
	0xb3, 0x7c, 0x16, 0xdb, 0x13, 0x26, 0x62, 0x26, 0x26, 0x8c, 0x4a, 0xee, 0xfa, 0x52, 0xd8, 0xea,
	0x72, 0x36, 0xd5, 0xed, 0xe4, 0x0b, 0x13, 0x5e, 0x4b, 0x1d, 0xce, 0xc9, 0x7b, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x24, 0x30, 0x6f, 0x8c, 0x57, 0x02, 0x00, 0x00,
}

func (m *StreamEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecondaryAddress) > 0 {
		i -= len(m.SecondaryAddress)
		copy(dAtA[i:], m.SecondaryAddress)
		i = encodeVarintStream(dAtA, i, uint64(len(m.SecondaryAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EventType) > 0 {
		i -= len(m.EventType)
		copy(dAtA[i:], m.EventType)
		i = encodeVarintStream(dAtA, i, uint64(len(m.EventType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscriptionKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscriptionKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscriptionKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SecondaryAddress) > 0 {
		i -= len(m.SecondaryAddress)
		copy(dAtA[i:], m.SecondaryAddress)
		i = encodeVarintStream(dAtA, i, uint64(len(m.SecondaryAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubscriptionType) > 0 {
		i -= len(m.SubscriptionType)
		copy(dAtA[i:], m.SubscriptionType)
		i = encodeVarintStream(dAtA, i, uint64(len(m.SubscriptionType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamListener) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamListener) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamListener) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyPrefixes) > 0 {
		for iNdEx := len(m.KeyPrefixes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.KeyPrefixes[iNdEx])
			copy(dAtA[i:], m.KeyPrefixes[iNdEx])
			i = encodeVarintStream(dAtA, i, uint64(len(m.KeyPrefixes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.StoreKey) > 0 {
		i -= len(m.StoreKey)
		copy(dAtA[i:], m.StoreKey)
		i = encodeVarintStream(dAtA, i, uint64(len(m.StoreKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintStream(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStream(dAtA []byte, offset int, v uint64) int {
	offset -= sovStream(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StreamEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.EventType)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.SecondaryAddress)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovStream(uint64(m.BlockHeight))
	}
	return n
}

func (m *SubscriptionKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubscriptionType)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.SecondaryAddress)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}

func (m *StreamListener) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.StoreKey)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if len(m.KeyPrefixes) > 0 {
		for _, b := range m.KeyPrefixes {
			l = len(b)
			n += 1 + l + sovStream(uint64(l))
		}
	}
	return n
}

func sovStream(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStream(x uint64) (n int) {
	return sovStream(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StreamEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondaryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecondaryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscriptionKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondaryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecondaryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamListener) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamListener: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamListener: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyPrefixes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyPrefixes = append(m.KeyPrefixes, make([]byte, postIndex-iNdEx))
			copy(m.KeyPrefixes[len(m.KeyPrefixes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStream(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStream
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStream
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStream
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStream
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStream        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStream          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStream = fmt.Errorf("proto: unexpected end of group")
)
