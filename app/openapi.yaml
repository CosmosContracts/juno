# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi
openapi: 3.0.3
info:
  title: Juno REST API
  version: v30.0.0
paths:
  /cosmos/mint/v1beta1/annual_provisions:
    get:
      description: AnnualProvisions current minting annual provisions value.
      operationId: mint_annual_provisions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryAnnualProvisionsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Mint
  /cosmos/mint/v1beta1/inflation:
    get:
      description: Inflation returns the current minting inflation value.
      operationId: mint_inflation
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryInflationResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Mint
  /cosmos/mint/v1beta1/params:
    get:
      description: Params returns the total set of minting parameters.
      operationId: mint_params
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryParamsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Mint
  /cosmos/mint/v1beta1/target_supply:
    get:
      description: TargetSupply current target supply for this phase value.
      operationId: mint_target_supply
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryTargetSupplyResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Mint
  /gaia/globalfee/v1beta1/minimum_gas_prices:
    get:
      description: MinimumGasPrices queries the minimum gas prices.
      operationId: globalfee_minimum_gas_prices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryMinimumGasPricesResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Globalfee
  /juno/clock/v1/contracts:
    get:
      description: ClockContracts
      operationId: clock_contracts
      parameters:
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: reverse is set to true if results are to be returned in the descending order.
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryClockContractsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Clock
  /juno/clock/v1/contracts/{contractAddress}:
    get:
      description: ClockContract
      operationId: clock_{contractAddress}
      parameters:
        - name: contractAddress
          in: path
          description: contract_address is the address of the contract to query.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryClockContractResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Clock
  /juno/clock/v1/params:
    get:
      description: Params
      operationId: clock_params
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryParamsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Clock
  /juno/cwhooks/v1/governance_contracts:
    get:
      description: GovernanceContracts
      operationId: cwhooks_governance_contracts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGovernanceContractsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Cwhooks
  /juno/cwhooks/v1/params:
    get:
      description: Params
      operationId: cwhooks_params
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryParamsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Cwhooks
  /juno/cwhooks/v1/staking_contracts:
    get:
      description: StakingContracts
      operationId: cwhooks_staking_contracts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryStakingContractsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Cwhooks
  /juno/drip/v1/params:
    get:
      description: Params retrieves the Drip module params
      operationId: drip_params
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryParamsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Drip
  /juno/feepay/v1/all_contracts:
    get:
      description: Retrieve all fee pay contracts
      operationId: feepay_all_contracts
      parameters:
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: reverse is set to true if results are to be returned in the descending order.
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryFeePayContractsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Feepay
  /juno/feepay/v1/contract/{contractAddress}:
    get:
      description: FeePayContract queries a single fee pay contract by address
      operationId: feepay_contract
      parameters:
        - name: contractAddress
          in: path
          description: contract_address defines the address of the fee pay contract
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryFeePayContractResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Feepay
  /juno/feepay/v1/contract/{contractAddress}/eligible/{walletAddress}:
    get:
      description: Query if sender is eligible for fee pay contract interaction
      operationId: feepay_eligible
      parameters:
        - name: contractAddress
          in: path
          description: The contract address.
          required: true
          schema:
            type: string
        - name: walletAddress
          in: path
          description: The wallet address.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryFeePayWalletIsEligibleResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Feepay
  /juno/feepay/v1/contract/{contractAddress}/uses/{walletAddress}:
    get:
      description: Retrieve the number of uses on a fee pay contract by wallet
      operationId: feepay_uses
      parameters:
        - name: contractAddress
          in: path
          description: The contract address.
          required: true
          schema:
            type: string
        - name: walletAddress
          in: path
          description: The wallet address.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryFeePayContractUsesResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Feepay
  /juno/feepay/v1/params:
    get:
      description: Params retrieves the FeePay module params
      operationId: feepay_params
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryParamsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Feepay
  /juno/feeshare/v1/fee_shares:
    get:
      description: FeeShares retrieves all registered FeeShares
      operationId: feeshare_fee_shares
      parameters:
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: reverse is set to true if results are to be returned in the descending order.
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryFeeSharesResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Feeshare
  /juno/feeshare/v1/fee_shares/{contractAddress}:
    get:
      description: FeeShare retrieves a registered FeeShare for a given contract address
      operationId: feeshare_{contractAddress}
      parameters:
        - name: contractAddress
          in: path
          description: contract_address of a registered contract in bech32 format
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryFeeShareResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Feeshare
  /juno/feeshare/v1/fee_shares/{deployerAddress}:
    get:
      description: |-
        DeployerFeeShares retrieves all FeeShares that a given deployer has
         registered
      operationId: feeshare_{deployerAddress}
      parameters:
        - name: deployerAddress
          in: path
          description: deployer_address in bech32 format
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: reverse is set to true if results are to be returned in the descending order.
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDeployerFeeSharesResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Feeshare
  /juno/feeshare/v1/fee_shares/{withdrawerAddress}:
    get:
      description: |-
        WithdrawerFeeShares retrieves all FeeShares with a given withdrawer
         address
      operationId: feeshare_{withdrawerAddress}
      parameters:
        - name: withdrawerAddress
          in: path
          description: withdrawer_address in bech32 format
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: reverse is set to true if results are to be returned in the descending order.
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryWithdrawerFeeSharesResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Feeshare
  /juno/feeshare/v1/params:
    get:
      description: Params retrieves the FeeShare module params
      operationId: feeshare_params
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryParamsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Feeshare
  /osmosis/tokenfactory/v1beta1/denoms/{denom}/authority_metadata:
    get:
      description: |-
        DenomAuthorityMetadata defines a gRPC query method for fetching
         DenomAuthorityMetadata for a particular denom.
      operationId: tokenfactory_authority_metadata
      parameters:
        - name: denom
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDenomAuthorityMetadataResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Tokenfactory
  /osmosis/tokenfactory/v1beta1/denoms_from_creator/{creator}:
    get:
      description: |-
        DenomsFromCreator defines a gRPC query method for fetching all
         denominations created by a specific admin/creator.
      operationId: tokenfactory_{creator}
      parameters:
        - name: creator
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDenomsFromCreatorResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Tokenfactory
  /osmosis/tokenfactory/v1beta1/params:
    get:
      description: |-
        Params defines a gRPC query method that returns the tokenfactory module's
         parameters.
      operationId: tokenfactory_params
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryParamsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Tokenfactory
  /cosmos/auth/v1beta1/account_info/{address}:
    get:
      description: |-
        AccountInfo queries account info which is common to all account types.

         Since: cosmos-sdk 0.47
      operationId: auth_account_info
      parameters:
        - name: address
          in: path
          description: address is the account address string.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryAccountInfoResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Auth
  /cosmos/auth/v1beta1/accounts:
    get:
      description: |-
        Accounts returns all the existing accounts.

         When called from another module, this query might consume a high amount of
         gas if the pagination field is incorrectly set.

         Since: cosmos-sdk 0.43
      operationId: auth_accounts
      parameters:
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryAccountsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Auth
  /cosmos/auth/v1beta1/accounts/{address}:
    get:
      description: Account returns account details based on address.
      operationId: auth_account
      parameters:
        - name: address
          in: path
          description: address defines the address to query for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryAccountResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Auth
  /cosmos/auth/v1beta1/address_by_id/{id}:
    get:
      description: |-
        AccountAddressByID returns account address based on account number.

         Since: cosmos-sdk 0.46.2
      operationId: auth_address_by_id
      parameters:
        - name: id
          in: path
          description: |-
            Deprecated, use account_id instead

             id is the account number of the address to be queried. This field
             should have been an uint64 (like all account numbers), and will be
             updated to uint64 in a future version of the auth query.
          required: true
          schema:
            type: string
        - name: accountId
          in: query
          description: |-
            account_id is the account number of the address to be queried.

             Since: cosmos-sdk 0.47
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryAccountAddressByIDResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Auth
  /cosmos/auth/v1beta1/bech32:
    get:
      description: |-
        Bech32Prefix queries bech32Prefix

         Since: cosmos-sdk 0.46
      operationId: auth_bech32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bech32PrefixResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Auth
  /cosmos/auth/v1beta1/bech32/{addressBytes}:
    get:
      description: |-
        AddressBytesToString converts Account Address bytes to string

         Since: cosmos-sdk 0.46
      operationId: auth_bech32_bytes
      parameters:
        - name: addressBytes
          in: path
          required: true
          schema:
            type: string
            format: bytes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressBytesToStringResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Auth
  /cosmos/auth/v1beta1/bech32/{addressString}:
    get:
      description: |-
        AddressStringToBytes converts Address string to bytes

         Since: cosmos-sdk 0.46
      operationId: auth_{addressString}
      parameters:
        - name: addressString
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressStringToBytesResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Auth
  /cosmos/auth/v1beta1/module_accounts:
    get:
      description: |-
        ModuleAccounts returns all the existing module accounts.

         Since: cosmos-sdk 0.46
      operationId: auth_module_accounts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryModuleAccountsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Auth
  /cosmos/auth/v1beta1/module_accounts/{name}:
    get:
      description: ModuleAccountByName returns the module account info by module name
      operationId: auth_{name}
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryModuleAccountByNameResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Auth
  /cosmos/auth/v1beta1/params:
    get:
      description: Params queries all parameters.
      operationId: auth_params
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryParamsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Auth
  /cosmos/authz/v1beta1/grants:
    get:
      description: Returns list of `Authorization`, granted to the grantee by the granter.
      operationId: authz_grants
      parameters:
        - name: granter
          in: query
          schema:
            type: string
        - name: grantee
          in: query
          schema:
            type: string
        - name: msgTypeUrl
          in: query
          description: Optional, msg_type_url, when set, will query only grants matching given msg type.
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGrantsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Authz
  /cosmos/authz/v1beta1/grants/grantee/{grantee}:
    get:
      description: |-
        GranteeGrants returns a list of `GrantAuthorization` by grantee.

         Since: cosmos-sdk 0.46
      operationId: authz_grants_by_grantee
      parameters:
        - name: grantee
          in: path
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGranteeGrantsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Authz
  /cosmos/authz/v1beta1/grants/granter/{granter}:
    get:
      description: |-
        GranterGrants returns list of `GrantAuthorization`, granted by granter.

         Since: cosmos-sdk 0.46
      operationId: authz_grants_by_granter
      parameters:
        - name: granter
          in: path
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGranterGrantsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Authz
  /cosmos/bank/v1beta1/balances/{address}:
    get:
      description: |-
        AllBalances queries the balance of all coins for a single account.

         When called from another module, this query might consume a high amount of
         gas if the pagination field is incorrectly set.
      operationId: bank_balances
      parameters:
        - name: address
          in: path
          description: address is the address to query balances for.
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
        - name: resolveDenom
          in: query
          description: |-
            resolve_denom is the flag to resolve the denom into a human-readable form from the metadata.

             Since: cosmos-sdk 0.50
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryAllBalancesResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Bank
  /cosmos/bank/v1beta1/balances/{address}/by_denom:
    get:
      description: Balance queries the balance of a single coin for a single account.
      operationId: bank_by_denom
      parameters:
        - name: address
          in: path
          description: address is the address to query balances for.
          required: true
          schema:
            type: string
        - name: denom
          in: query
          description: denom is the coin denom to query balances for.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryBalanceResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Bank
  /cosmos/bank/v1beta1/denom_owners/{denom}:
    get:
      description: |-
        DenomOwners queries for all account addresses that own a particular token
         denomination.

         When called from another module, this query might consume a high amount of
         gas if the pagination field is incorrectly set.

         Since: cosmos-sdk 0.46
      operationId: bank_denom_owners
      parameters:
        - name: denom
          in: path
          description: denom defines the coin denomination to query all account holders for.
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDenomOwnersResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Bank
  /cosmos/bank/v1beta1/denom_owners_by_query:
    get:
      description: |-
        DenomOwnersByQuery queries for all account addresses that own a particular token
         denomination.

         Since: cosmos-sdk 0.50.3
      operationId: bank_denom_owners_by_query
      parameters:
        - name: denom
          in: query
          description: denom defines the coin denomination to query all account holders for.
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDenomOwnersByQueryResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Bank
  /cosmos/bank/v1beta1/denoms_metadata:
    get:
      description: |-
        DenomsMetadata queries the client metadata for all registered coin
         denominations.
      operationId: bank_denoms_metadata
      parameters:
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDenomsMetadataResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Bank
  /cosmos/bank/v1beta1/denoms_metadata/{denom}:
    get:
      description: DenomMetadata queries the client metadata of a given coin denomination.
      operationId: bank_denom_metadata
      parameters:
        - name: denom
          in: path
          description: denom is the coin denom to query the metadata for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDenomMetadataResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Bank
  /cosmos/bank/v1beta1/denoms_metadata_by_query_string:
    get:
      description: DenomMetadataByQueryString queries the client metadata of a given coin denomination.
      operationId: bank_denoms_metadata_by_query_string
      parameters:
        - name: denom
          in: query
          description: denom is the coin denom to query the metadata for.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDenomMetadataByQueryStringResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Bank
  /cosmos/bank/v1beta1/params:
    get:
      description: Params queries the parameters of x/bank module.
      operationId: bank_params
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryParamsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Bank
  /cosmos/bank/v1beta1/send_enabled:
    get:
      description: |-
        SendEnabled queries for SendEnabled entries.

         This query only returns denominations that have specific SendEnabled settings.
         Any denomination that does not have a specific setting will use the default
         params.default_send_enabled, and will not be returned by this query.

         Since: cosmos-sdk 0.47
      operationId: bank_send_enabled
      parameters:
        - name: denoms
          in: query
          description: denoms is the specific denoms you want look up. Leave empty to get all entries.
          schema:
            type: array
            items:
              type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerySendEnabledResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Bank
  /cosmos/bank/v1beta1/spendable_balances/{address}:
    get:
      description: |-
        SpendableBalances queries the spendable balance of all coins for a single
         account.

         When called from another module, this query might consume a high amount of
         gas if the pagination field is incorrectly set.

         Since: cosmos-sdk 0.46
      operationId: bank_spendable_balances
      parameters:
        - name: address
          in: path
          description: address is the address to query spendable balances for.
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerySpendableBalancesResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Bank
  /cosmos/bank/v1beta1/spendable_balances/{address}/by_denom:
    get:
      description: |-
        SpendableBalanceByDenom queries the spendable balance of a single denom for
         a single account.

         When called from another module, this query might consume a high amount of
         gas if the pagination field is incorrectly set.

         Since: cosmos-sdk 0.47
      operationId: bank_spendable_balances_by_denom
      parameters:
        - name: address
          in: path
          description: address is the address to query balances for.
          required: true
          schema:
            type: string
        - name: denom
          in: query
          description: denom is the coin denom to query balances for.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerySpendableBalanceByDenomResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Bank
  /cosmos/bank/v1beta1/supply:
    get:
      description: |-
        TotalSupply queries the total supply of all coins.

         When called from another module, this query might consume a high amount of
         gas if the pagination field is incorrectly set.
      operationId: bank_supply
      parameters:
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryTotalSupplyResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Bank
  /cosmos/bank/v1beta1/supply/by_denom:
    get:
      description: |-
        SupplyOf queries the supply of a single coin.

         When called from another module, this query might consume a high amount of
         gas if the pagination field is incorrectly set.
      operationId: bank_supply_by_denom
      parameters:
        - name: denom
          in: query
          description: denom is the coin denom to query balances for.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerySupplyOfResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Bank
  /cosmos/base/node/v1beta1/config:
    get:
      description: Config queries for the operator configuration.
      operationId: base_config
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Base
  /cosmos/base/node/v1beta1/status:
    get:
      description: Status queries for the node status.
      operationId: base_status
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Base
  /cosmos/base/reflection/v1beta1/app_descriptor/authn:
    get:
      description: |-
        GetAuthnDescriptor returns information on how to authenticate transactions in the application
         NOTE: this RPC is still experimental and might be subject to breaking changes or removal in
         future releases of the cosmos-sdk.
      operationId: base_authn
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAuthnDescriptorResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Base
  /cosmos/base/reflection/v1beta1/app_descriptor/chain:
    get:
      description: GetChainDescriptor returns the description of the chain
      operationId: base_chain
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetChainDescriptorResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Base
  /cosmos/base/reflection/v1beta1/app_descriptor/codec:
    get:
      description: GetCodecDescriptor returns the descriptor of the codec of the application
      operationId: base_codec
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCodecDescriptorResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Base
  /cosmos/base/reflection/v1beta1/app_descriptor/configuration:
    get:
      description: GetConfigurationDescriptor returns the descriptor for the sdk.Config of the application
      operationId: base_configuration
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConfigurationDescriptorResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Base
  /cosmos/base/reflection/v1beta1/app_descriptor/query_services:
    get:
      description: GetQueryServicesDescriptor returns the available gRPC queryable services of the application
      operationId: base_query_services
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetQueryServicesDescriptorResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Base
  /cosmos/base/reflection/v1beta1/app_descriptor/tx_descriptor:
    get:
      description: GetTxDescriptor returns information on the used transaction object and available msgs that can be used
      operationId: base_tx_descriptor
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTxDescriptorResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Base
  /cosmos/base/reflection/v1beta1/interfaces:
    get:
      description: |-
        ListAllInterfaces lists all the interfaces registered in the interface
         registry.
      operationId: base_interfaces
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAllInterfacesResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Base
  /cosmos/base/reflection/v1beta1/interfaces/{interfaceName}/implementations:
    get:
      description: |-
        ListImplementations list all the concrete types that implement a given
         interface.
      operationId: base_implementations
      parameters:
        - name: interfaceName
          in: path
          description: interface_name defines the interface to query the implementations for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListImplementationsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Base
  /cosmos/base/tendermint/v1beta1/abci_query:
    get:
      description: |-
        ABCIQuery defines a query handler that supports ABCI queries directly to the
         application, bypassing Tendermint completely. The ABCI query must contain
         a valid and supported path, including app, custom, p2p, and store.

         Since: cosmos-sdk 0.46
      operationId: base_abci_query
      parameters:
        - name: data
          in: query
          schema:
            type: string
            format: bytes
        - name: path
          in: query
          schema:
            type: string
        - name: height
          in: query
          schema:
            type: string
        - name: prove
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ABCIQueryResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Base
  /cosmos/base/tendermint/v1beta1/blocks/latest:
    get:
      description: GetLatestBlock returns the latest block.
      operationId: base_latest
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLatestBlockResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Base
  /cosmos/base/tendermint/v1beta1/blocks/{height}:
    get:
      description: GetBlockByHeight queries block for given height.
      operationId: base_block_height
      parameters:
        - name: height
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBlockByHeightResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Base
  /cosmos/base/tendermint/v1beta1/node_info:
    get:
      description: GetNodeInfo queries the current node info.
      operationId: base_node_info
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNodeInfoResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Base
  /cosmos/base/tendermint/v1beta1/syncing:
    get:
      description: GetSyncing queries node syncing.
      operationId: base_syncing
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSyncingResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Base
  /cosmos/base/tendermint/v1beta1/validatorsets/latest:
    get:
      description: GetLatestValidatorSet queries latest validator-set.
      operationId: base_validatorsets_latest
      parameters:
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLatestValidatorSetResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Base
  /cosmos/base/tendermint/v1beta1/validatorsets/{height}:
    get:
      description: GetValidatorSetByHeight queries validator-set at a given height.
      operationId: base_validatorsets_height
      parameters:
        - name: height
          in: path
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetValidatorSetByHeightResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Base
  /cosmos/circuit/v1/accounts:
    get:
      description: Account returns account permissions.
      operationId: circuit_accounts
      parameters:
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Circuit
  /cosmos/circuit/v1/accounts/{address}:
    get:
      description: Account returns account permissions.
      operationId: circuit_account
      parameters:
        - name: address
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Circuit
  /cosmos/circuit/v1/disable_list:
    get:
      description: DisabledList returns a list of disabled message urls
      operationId: circuit_disable_list
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisabledListResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Circuit
  /cosmos/consensus/v1/params:
    get:
      description: Params queries the parameters of x/consensus module.
      operationId: consensus_params
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryParamsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Consensus
  /cosmos/distribution/v1beta1/community_pool:
    get:
      description: CommunityPool queries the community pool coins.
      operationId: distribution_community_pool
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryCommunityPoolResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Distribution
  /cosmos/distribution/v1beta1/delegators/{delegatorAddress}/rewards:
    get:
      description: |-
        DelegationTotalRewards queries the total rewards accrued by each
         validator.
      operationId: distribution_rewards
      parameters:
        - name: delegatorAddress
          in: path
          description: delegator_address defines the delegator address to query for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDelegationTotalRewardsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Distribution
  /cosmos/distribution/v1beta1/delegators/{delegatorAddress}/rewards/{validatorAddress}:
    get:
      description: DelegationRewards queries the total rewards accrued by a delegation.
      operationId: distribution_delegator_rewards_by_validator
      parameters:
        - name: delegatorAddress
          in: path
          description: delegator_address defines the delegator address to query for.
          required: true
          schema:
            type: string
        - name: validatorAddress
          in: path
          description: validator_address defines the validator address to query for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDelegationRewardsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Distribution
  /cosmos/distribution/v1beta1/delegators/{delegatorAddress}/validators:
    get:
      description: DelegatorValidators queries the validators of a delegator.
      operationId: distribution_validators
      parameters:
        - name: delegatorAddress
          in: path
          description: delegator_address defines the delegator address to query for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDelegatorValidatorsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Distribution
  /cosmos/distribution/v1beta1/delegators/{delegatorAddress}/withdraw_address:
    get:
      description: DelegatorWithdrawAddress queries withdraw address of a delegator.
      operationId: distribution_withdraw_address
      parameters:
        - name: delegatorAddress
          in: path
          description: delegator_address defines the delegator address to query for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDelegatorWithdrawAddressResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Distribution
  /cosmos/distribution/v1beta1/params:
    get:
      description: Params queries params of the distribution module.
      operationId: distribution_params
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryParamsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Distribution
  /cosmos/distribution/v1beta1/validators/{validatorAddress}:
    get:
      description: ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator
      operationId: distribution_validator_rewards
      parameters:
        - name: validatorAddress
          in: path
          description: validator_address defines the validator address to query for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryValidatorDistributionInfoResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Distribution
  /cosmos/distribution/v1beta1/validators/{validatorAddress}/commission:
    get:
      description: ValidatorCommission queries accumulated commission for a validator.
      operationId: distribution_commission
      parameters:
        - name: validatorAddress
          in: path
          description: validator_address defines the validator address to query for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryValidatorCommissionResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Distribution
  /cosmos/distribution/v1beta1/validators/{validatorAddress}/outstanding_rewards:
    get:
      description: ValidatorOutstandingRewards queries rewards of a validator address.
      operationId: distribution_outstanding_rewards
      parameters:
        - name: validatorAddress
          in: path
          description: validator_address defines the validator address to query for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryValidatorOutstandingRewardsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Distribution
  /cosmos/distribution/v1beta1/validators/{validatorAddress}/slashes:
    get:
      description: ValidatorSlashes queries slash events of a validator.
      operationId: distribution_slashes
      parameters:
        - name: validatorAddress
          in: path
          description: validator_address defines the validator address to query for.
          required: true
          schema:
            type: string
        - name: startingHeight
          in: query
          description: starting_height defines the optional starting height to query the slashes.
          schema:
            type: string
        - name: endingHeight
          in: query
          description: starting_height defines the optional ending height to query the slashes.
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryValidatorSlashesResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Distribution
  /cosmos/evidence/v1beta1/evidence:
    get:
      description: AllEvidence queries all evidence.
      operationId: evidence_evidence
      parameters:
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryAllEvidenceResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Evidence
  /cosmos/evidence/v1beta1/evidence/{hash}:
    get:
      description: Evidence queries evidence based on evidence hash.
      operationId: evidence_hash
      parameters:
        - name: hash
          in: path
          description: |-
            hash defines the evidence hash of the requested evidence.

             Since: cosmos-sdk 0.47
          required: true
          schema:
            type: string
        - name: evidenceHash
          in: query
          description: |-
            evidence_hash defines the hash of the requested evidence.
             Deprecated: Use hash, a HEX encoded string, instead.
          schema:
            type: string
            format: bytes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryEvidenceResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Evidence
  /cosmos/feegrant/v1beta1/allowance/{granter}/{grantee}:
    get:
      description: Allowance returns granted allwance to the grantee by the granter.
      operationId: feegrant_allowance
      parameters:
        - name: granter
          in: path
          description: granter is the address of the user granting an allowance of their funds.
          required: true
          schema:
            type: string
        - name: grantee
          in: path
          description: grantee is the address of the user being granted an allowance of another user's funds.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryAllowanceResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Feegrant
  /cosmos/feegrant/v1beta1/allowances/{grantee}:
    get:
      description: Allowances returns all the grants for the given grantee address.
      operationId: feegrant_allowances
      parameters:
        - name: grantee
          in: path
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryAllowancesResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Feegrant
  /cosmos/feegrant/v1beta1/issued/{granter}:
    get:
      description: |-
        AllowancesByGranter returns all the grants given by an address

         Since: cosmos-sdk 0.46
      operationId: feegrant_issued_by_granter
      parameters:
        - name: granter
          in: path
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryAllowancesByGranterResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Feegrant
  /cosmos/gov/v1/constitution:
    get:
      description: Constitution queries the chain's constitution.
      operationId: gov_constitution
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryConstitutionResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Gov
  /cosmos/gov/v1/params/{paramsType}:
    get:
      description: Params queries all parameters of the gov module.
      operationId: gov_params
      parameters:
        - name: paramsType
          in: path
          description: |-
            params_type defines which parameters to query for, can be one of "voting",
             "tallying" or "deposit".
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryParamsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Gov
  /cosmos/gov/v1/proposals:
    get:
      description: Proposals queries all proposals based on given status.
      operationId: gov_proposals
      parameters:
        - name: proposalStatus
          in: query
          description: proposal_status defines the status of the proposals.
          schema:
            type: integer
            format: enum
        - name: voter
          in: query
          description: voter defines the voter address for the proposals.
          schema:
            type: string
        - name: depositor
          in: query
          description: depositor defines the deposit addresses from the proposals.
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryProposalsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Gov
  /cosmos/gov/v1/proposals/{proposalId}:
    get:
      description: Proposal queries proposal details based on ProposalID.
      operationId: gov_proposal
      parameters:
        - name: proposalId
          in: path
          description: proposal_id defines the unique id of the proposal.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryProposalResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Gov
  /cosmos/gov/v1/proposals/{proposalId}/deposits:
    get:
      description: Deposits queries all deposits of a single proposal.
      operationId: gov_deposits
      parameters:
        - name: proposalId
          in: path
          description: proposal_id defines the unique id of the proposal.
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDepositsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Gov
  /cosmos/gov/v1/proposals/{proposalId}/deposits/{depositor}:
    get:
      description: Deposit queries single deposit information based on proposalID, depositAddr.
      operationId: gov_proposal_deposit_by_depositor
      parameters:
        - name: proposalId
          in: path
          description: proposal_id defines the unique id of the proposal.
          required: true
          schema:
            type: string
        - name: depositor
          in: path
          description: depositor defines the deposit addresses from the proposals.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDepositResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Gov
  /cosmos/gov/v1/proposals/{proposalId}/tally:
    get:
      description: TallyResult queries the tally of a proposal vote.
      operationId: gov_tally
      parameters:
        - name: proposalId
          in: path
          description: proposal_id defines the unique id of the proposal.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryTallyResultResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Gov
  /cosmos/gov/v1/proposals/{proposalId}/votes:
    get:
      description: Votes queries votes of a given proposal.
      operationId: gov_votes
      parameters:
        - name: proposalId
          in: path
          description: proposal_id defines the unique id of the proposal.
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryVotesResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Gov
  /cosmos/gov/v1/proposals/{proposalId}/votes/{voter}:
    get:
      description: Vote queries voted information based on proposalID, voterAddr.
      operationId: gov_proposal_vote_by_voter
      parameters:
        - name: proposalId
          in: path
          description: proposal_id defines the unique id of the proposal.
          required: true
          schema:
            type: string
        - name: voter
          in: path
          description: voter defines the voter address for the proposals.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryVoteResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Gov
  /cosmos/gov/v1beta1/params/{paramsType}:
    get:
      description: Params queries all parameters of the gov module.
      operationId: gov_v1beta1_params
      parameters:
        - name: paramsType
          in: path
          description: |-
            params_type defines which parameters to query for, can be one of "voting",
             "tallying" or "deposit".
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryParamsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Gov
  /cosmos/gov/v1beta1/proposals:
    get:
      description: Proposals queries all proposals based on given status.
      operationId: gov_v1beta1_proposals
      parameters:
        - name: proposalStatus
          in: query
          description: proposal_status defines the status of the proposals.
          schema:
            type: integer
            format: enum
        - name: voter
          in: query
          description: voter defines the voter address for the proposals.
          schema:
            type: string
        - name: depositor
          in: query
          description: depositor defines the deposit addresses from the proposals.
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryProposalsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Gov
  /cosmos/gov/v1beta1/proposals/{proposalId}:
    get:
      description: Proposal queries proposal details based on ProposalID.
      operationId: gov_v1beta1_proposal
      parameters:
        - name: proposalId
          in: path
          description: proposal_id defines the unique id of the proposal.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryProposalResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Gov
  /cosmos/gov/v1beta1/proposals/{proposalId}/deposits:
    get:
      description: Deposits queries all deposits of a single proposal.
      operationId: gov_v1beta1_proposal_deposits
      parameters:
        - name: proposalId
          in: path
          description: proposal_id defines the unique id of the proposal.
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDepositsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Gov
  /cosmos/gov/v1beta1/proposals/{proposalId}/deposits/{depositor}:
    get:
      description: Deposit queries single deposit information based on proposalID, depositor address.
      operationId: gov_v1beta1_proposal_deposit_by_depositor
      parameters:
        - name: proposalId
          in: path
          description: proposal_id defines the unique id of the proposal.
          required: true
          schema:
            type: string
        - name: depositor
          in: path
          description: depositor defines the deposit addresses from the proposals.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDepositResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Gov
  /cosmos/gov/v1beta1/proposals/{proposalId}/tally:
    get:
      description: TallyResult queries the tally of a proposal vote.
      operationId: gov_v1beta1_proposal_tally
      parameters:
        - name: proposalId
          in: path
          description: proposal_id defines the unique id of the proposal.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryTallyResultResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Gov
  /cosmos/gov/v1beta1/proposals/{proposalId}/votes:
    get:
      description: Votes queries votes of a given proposal.
      operationId: gov_v1beta1_proposal_votes
      parameters:
        - name: proposalId
          in: path
          description: proposal_id defines the unique id of the proposal.
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryVotesResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Gov
  /cosmos/gov/v1beta1/proposals/{proposalId}/votes/{voter}:
    get:
      description: Vote queries voted information based on proposalID, voterAddr.
      operationId: gov_v1beta1_proposal_vote_by_voter
      parameters:
        - name: proposalId
          in: path
          description: proposal_id defines the unique id of the proposal.
          required: true
          schema:
            type: string
        - name: voter
          in: path
          description: voter defines the voter address for the proposals.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryVoteResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Gov
  /cosmos/group/v1/group_info/{groupId}:
    get:
      description: GroupInfo queries group info based on group id.
      operationId: group_info
      parameters:
        - name: groupId
          in: path
          description: group_id is the unique ID of the group.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGroupInfoResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Group
  /cosmos/group/v1/group_members/{groupId}:
    get:
      description: GroupMembers queries members of a group by group id.
      operationId: group_members
      parameters:
        - name: groupId
          in: path
          description: group_id is the unique ID of the group.
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGroupMembersResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Group
  /cosmos/group/v1/group_policies_by_admin/{admin}:
    get:
      description: GroupPoliciesByAdmin queries group policies by admin address.
      operationId: group_policies_by_admin
      parameters:
        - name: admin
          in: path
          description: admin is the admin address of the group policy.
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGroupPoliciesByAdminResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Group
  /cosmos/group/v1/group_policies_by_group/{groupId}:
    get:
      description: GroupPoliciesByGroup queries group policies by group id.
      operationId: group_policies_by_group
      parameters:
        - name: groupId
          in: path
          description: group_id is the unique ID of the group policy's group.
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGroupPoliciesByGroupResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Group
  /cosmos/group/v1/group_policy_info/{address}:
    get:
      description: GroupPolicyInfo queries group policy info based on account address of group policy.
      operationId: group_policy_info_by_address
      parameters:
        - name: address
          in: path
          description: address is the account address of the group policy.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGroupPolicyInfoResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Group
  /cosmos/group/v1/groups:
    get:
      description: |-
        Groups queries all groups in state.

         Since: cosmos-sdk 0.47.1
      operationId: group_groups
      parameters:
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGroupsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Group
  /cosmos/group/v1/groups_by_admin/{admin}:
    get:
      description: GroupsByAdmin queries groups by admin address.
      operationId: group_groups_by_admin
      parameters:
        - name: admin
          in: path
          description: admin is the account address of a group's admin.
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGroupsByAdminResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Group
  /cosmos/group/v1/groups_by_member/{address}:
    get:
      description: GroupsByMember queries groups by member address.
      operationId: group_groups_by_member
      parameters:
        - name: address
          in: path
          description: address is the group member address.
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryGroupsByMemberResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Group
  /cosmos/group/v1/proposal/{proposalId}:
    get:
      description: Proposal queries a proposal based on proposal id.
      operationId: group_proposal
      parameters:
        - name: proposalId
          in: path
          description: proposal_id is the unique ID of a proposal.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryProposalResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Group
  /cosmos/group/v1/proposals/{proposalId}/tally:
    get:
      description: |-
        TallyResult returns the tally result of a proposal. If the proposal is
         still in voting period, then this query computes the current tally state,
         which might not be final. On the other hand, if the proposal is final,
         then it simply returns the `final_tally_result` state stored in the
         proposal itself.
      operationId: group_tally
      parameters:
        - name: proposalId
          in: path
          description: proposal_id is the unique id of a proposal.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryTallyResultResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Group
  /cosmos/group/v1/proposals_by_group_policy/{address}:
    get:
      description: ProposalsByGroupPolicy queries proposals based on account address of group policy.
      operationId: group_proposals_by_group_policy
      parameters:
        - name: address
          in: path
          description: address is the account address of the group policy related to proposals.
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryProposalsByGroupPolicyResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Group
  /cosmos/group/v1/vote_by_proposal_voter/{proposalId}/{voter}:
    get:
      description: VoteByProposalVoter queries a vote by proposal id and voter.
      operationId: group_vote_by_proposal_voter
      parameters:
        - name: proposalId
          in: path
          description: proposal_id is the unique ID of a proposal.
          required: true
          schema:
            type: string
        - name: voter
          in: path
          description: voter is a proposal voter account address.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryVoteByProposalVoterResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Group
  /cosmos/group/v1/votes_by_proposal/{proposalId}:
    get:
      description: VotesByProposal queries a vote by proposal id.
      operationId: group_votes_by_proposal
      parameters:
        - name: proposalId
          in: path
          description: proposal_id is the unique ID of a proposal.
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryVotesByProposalResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Group
  /cosmos/group/v1/votes_by_voter/{voter}:
    get:
      description: VotesByVoter queries a vote by voter.
      operationId: group_votes_by_voter
      parameters:
        - name: voter
          in: path
          description: voter is a proposal voter account address.
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryVotesByVoterResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Group
  /cosmos/nft/v1beta1/balance/{owner}/{classId}:
    get:
      description: Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
      operationId: nft_balance
      parameters:
        - name: owner
          in: path
          description: owner is the owner address of the nft
          required: true
          schema:
            type: string
        - name: classId
          in: path
          description: class_id associated with the nft
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryBalanceResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Nft
  /cosmos/nft/v1beta1/classes:
    get:
      description: Classes queries all NFT classes
      operationId: nft_classes
      parameters:
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryClassesResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Nft
  /cosmos/nft/v1beta1/classes/{classId}:
    get:
      description: Class queries an NFT class based on its id
      operationId: nft_class
      parameters:
        - name: classId
          in: path
          description: class_id associated with the nft
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryClassResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Nft
  /cosmos/nft/v1beta1/nfts:
    get:
      description: |-
        NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in
         ERC721Enumerable
      operationId: nft_nfts
      parameters:
        - name: classId
          in: query
          description: class_id associated with the nft
          schema:
            type: string
        - name: owner
          in: query
          description: owner is the owner address of the nft
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryNFTsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Nft
  /cosmos/nft/v1beta1/nfts/{classId}/{id}:
    get:
      description: NFT queries an NFT based on its class and id.
      operationId: nft_by_class_and_id
      parameters:
        - name: classId
          in: path
          description: class_id associated with the nft
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id is a unique identifier of the NFT
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryNFTResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Nft
  /cosmos/nft/v1beta1/owner/{classId}/{id}:
    get:
      description: Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
      operationId: nft_owner
      parameters:
        - name: classId
          in: path
          description: class_id associated with the nft
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id is a unique identifier of the NFT
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryOwnerResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Nft
  /cosmos/nft/v1beta1/supply/{classId}:
    get:
      description: Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
      operationId: nft_supply
      parameters:
        - name: classId
          in: path
          description: class_id associated with the nft
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerySupplyResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Nft
  /cosmos/params/v1beta1/params:
    get:
      description: |-
        Params queries a specific parameter of a module, given its subspace and
         key.
      operationId: params_params
      parameters:
        - name: subspace
          in: query
          description: subspace defines the module to query the parameter for.
          schema:
            type: string
        - name: key
          in: query
          description: key defines the key of the parameter in the subspace.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryParamsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Params
  /cosmos/params/v1beta1/subspaces:
    get:
      description: |-
        Subspaces queries for all registered subspaces and all keys for a subspace.

         Since: cosmos-sdk 0.46
      operationId: params_subspaces
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerySubspacesResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Params
  /cosmos/slashing/v1beta1/params:
    get:
      description: Params queries the parameters of slashing module
      operationId: slashing_params
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryParamsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Slashing
  /cosmos/slashing/v1beta1/signing_infos:
    get:
      description: SigningInfos queries signing info of all validators
      operationId: slashing_signing_infos
      parameters:
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerySigningInfosResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Slashing
  /cosmos/slashing/v1beta1/signing_infos/{consAddress}:
    get:
      description: SigningInfo queries the signing info of given cons address
      operationId: slashing_signing_infos_by_cons_address
      parameters:
        - name: consAddress
          in: path
          description: cons_address is the address to query signing info of
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuerySigningInfoResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Slashing
  /cosmos/staking/v1beta1/delegations/{delegatorAddr}:
    get:
      description: |-
        DelegatorDelegations queries all delegations of a given delegator address.

         When called from another module, this query might consume a high amount of
         gas if the pagination field is incorrectly set.
      operationId: staking_delegations_by_delegator
      parameters:
        - name: delegatorAddr
          in: path
          description: delegator_addr defines the delegator address to query for.
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDelegatorDelegationsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Staking
  /cosmos/staking/v1beta1/delegators/{delegatorAddr}/redelegations:
    get:
      description: |-
        Redelegations queries redelegations of given address.

         When called from another module, this query might consume a high amount of
         gas if the pagination field is incorrectly set.
      operationId: staking_redelegations
      parameters:
        - name: delegatorAddr
          in: path
          description: delegator_addr defines the delegator address to query for.
          required: true
          schema:
            type: string
        - name: srcValidatorAddr
          in: query
          description: src_validator_addr defines the validator address to redelegate from.
          schema:
            type: string
        - name: dstValidatorAddr
          in: query
          description: dst_validator_addr defines the validator address to redelegate to.
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryRedelegationsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Staking
  /cosmos/staking/v1beta1/delegators/{delegatorAddr}/unbonding_delegations:
    get:
      description: |-
        DelegatorUnbondingDelegations queries all unbonding delegations of a given
         delegator address.

         When called from another module, this query might consume a high amount of
         gas if the pagination field is incorrectly set.
      operationId: staking_unbonding_delegations
      parameters:
        - name: delegatorAddr
          in: path
          description: delegator_addr defines the delegator address to query for.
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDelegatorUnbondingDelegationsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Staking
  /cosmos/staking/v1beta1/delegators/{delegatorAddr}/validators:
    get:
      description: |-
        DelegatorValidators queries all validators info for given delegator
         address.

         When called from another module, this query might consume a high amount of
         gas if the pagination field is incorrectly set.
      operationId: staking_validators
      parameters:
        - name: delegatorAddr
          in: path
          description: delegator_addr defines the delegator address to query for.
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDelegatorValidatorsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Staking
  /cosmos/staking/v1beta1/delegators/{delegatorAddr}/validators/{validatorAddr}:
    get:
      description: |-
        DelegatorValidator queries validator info for given delegator validator
         pair.
      operationId: staking_validator_by_delegator
      parameters:
        - name: delegatorAddr
          in: path
          description: delegator_addr defines the delegator address to query for.
          required: true
          schema:
            type: string
        - name: validatorAddr
          in: path
          description: validator_addr defines the validator address to query for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDelegatorValidatorResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Staking
  /cosmos/staking/v1beta1/historical_info/{height}:
    get:
      description: HistoricalInfo queries the historical info for given height.
      operationId: staking_historical_info
      parameters:
        - name: height
          in: path
          description: height defines at which height to query the historical info.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryHistoricalInfoResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Staking
  /cosmos/staking/v1beta1/params:
    get:
      description: Parameters queries the staking parameters.
      operationId: staking_params
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryParamsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Staking
  /cosmos/staking/v1beta1/pool:
    get:
      description: Pool queries the pool info.
      operationId: staking_pool
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryPoolResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Staking
  /cosmos/staking/v1beta1/validators:
    get:
      description: |-
        Validators queries all validators that match the given status.

         When called from another module, this query might consume a high amount of
         gas if the pagination field is incorrectly set.
      operationId: staking_all_validators
      parameters:
        - name: status
          in: query
          description: status enables to query for validators matching a given status.
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryValidatorsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Staking
  /cosmos/staking/v1beta1/validators/{validatorAddr}:
    get:
      description: Validator queries validator info for given validator address.
      operationId: staking_validator
      parameters:
        - name: validatorAddr
          in: path
          description: validator_addr defines the validator address to query for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryValidatorResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Staking
  /cosmos/staking/v1beta1/validators/{validatorAddr}/delegations:
    get:
      description: |-
        ValidatorDelegations queries delegate info for given validator.

         When called from another module, this query might consume a high amount of
         gas if the pagination field is incorrectly set.
      operationId: staking_delegations
      parameters:
        - name: validatorAddr
          in: path
          description: validator_addr defines the validator address to query for.
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryValidatorDelegationsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Staking
  /cosmos/staking/v1beta1/validators/{validatorAddr}/delegations/{delegatorAddr}:
    get:
      description: Delegation queries delegate info for given validator delegator pair.
      operationId: staking_validator_delegation_by_delegator
      parameters:
        - name: validatorAddr
          in: path
          description: validator_addr defines the validator address to query for.
          required: true
          schema:
            type: string
        - name: delegatorAddr
          in: path
          description: delegator_addr defines the delegator address to query for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDelegationResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Staking
  /cosmos/staking/v1beta1/validators/{validatorAddr}/delegations/{delegatorAddr}/unbonding_delegation:
    get:
      description: |-
        UnbondingDelegation queries unbonding info for given validator delegator
         pair.
      operationId: staking_unbonding_delegation
      parameters:
        - name: validatorAddr
          in: path
          description: validator_addr defines the validator address to query for.
          required: true
          schema:
            type: string
        - name: delegatorAddr
          in: path
          description: delegator_addr defines the delegator address to query for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryUnbondingDelegationResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Staking
  /cosmos/staking/v1beta1/validators/{validatorAddr}/unbonding_delegations:
    get:
      description: |-
        ValidatorUnbondingDelegations queries unbonding delegations of a validator.

         When called from another module, this query might consume a high amount of
         gas if the pagination field is incorrectly set.
      operationId: staking_validator_unbonding_delegations
      parameters:
        - name: validatorAddr
          in: path
          description: validator_addr defines the validator address to query for.
          required: true
          schema:
            type: string
        - name: pagination.key
          in: query
          description: |-
            key is a value returned in PageResponse.next_key to begin
             querying the next page most efficiently. Only one of offset or key
             should be set.
          schema:
            type: string
            format: bytes
        - name: pagination.offset
          in: query
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
             It is less efficient than using key. Only one of offset or key should
             be set.
          schema:
            type: string
        - name: pagination.limit
          in: query
          description: |-
            limit is the total number of results to be returned in the result page.
             If left empty it will default to a value to be set by each app.
          schema:
            type: string
        - name: pagination.countTotal
          in: query
          description: |-
            count_total is set to true  to indicate that the result set should include
             a count of the total number of items available for pagination in UIs.
             count_total is only respected when offset is used. It is ignored when key
             is set.
          schema:
            type: boolean
        - name: pagination.reverse
          in: query
          description: |-
            reverse is set to true if results are to be returned in the descending order.

             Since: cosmos-sdk 0.43
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryValidatorUnbondingDelegationsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Staking
  /cosmos/upgrade/v1beta1/applied_plan/{name}:
    get:
      description: AppliedPlan queries a previously applied upgrade plan by its name.
      operationId: upgrade_applied_plan
      parameters:
        - name: name
          in: path
          description: name is the name of the applied plan to query for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryAppliedPlanResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Upgrade
  /cosmos/upgrade/v1beta1/authority:
    get:
      description: |-
        Returns the account with authority to conduct upgrades

         Since: cosmos-sdk 0.46
      operationId: upgrade_authority
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryAuthorityResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Upgrade
  /cosmos/upgrade/v1beta1/current_plan:
    get:
      description: CurrentPlan queries the current upgrade plan.
      operationId: upgrade_current_plan
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryCurrentPlanResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Upgrade
  /cosmos/upgrade/v1beta1/module_versions:
    get:
      description: |-
        ModuleVersions queries the list of module versions from state.

         Since: cosmos-sdk 0.43
      operationId: upgrade_module_versions
      parameters:
        - name: moduleName
          in: query
          description: |-
            module_name is a field to query a specific module
             consensus version from state. Leaving this empty will
             fetch the full list of module versions from state
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryModuleVersionsResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Upgrade
  /cosmos/upgrade/v1beta1/upgraded_consensus_state/{lastHeight}:
    get:
      description: |-
        UpgradedConsensusState queries the consensus state that will serve
         as a trusted kernel for the next version of this chain. It will only be
         stored at the last height of this chain.
         UpgradedConsensusState RPC not supported with legacy querier
         This rpc is deprecated now that IBC has its own replacement
         (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
      operationId: upgrade_upgraded_consensus_state
      parameters:
        - name: lastHeight
          in: path
          description: |-
            last height of the current chain must be sent in request
             as this is the height under which next consensus state is stored
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryUpgradedConsensusStateResponse'
        default:
          description: Default error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      tags:
        - Upgrade
components:
  schemas:
    ClockContract:
      type: object
      properties:
        contractAddress:
          type: string
          description: The address of the contract.
        isJailed:
          type: boolean
          description: The jail status of the contract.
      description: |-
        This object is used to store the contract address and the
         jail status of the contract.
    DecCoin:
      type: object
      properties:
        denom:
          type: string
        amount:
          type: string
      description: |-
        DecCoin defines a token with a denomination and a decimal amount.

         NOTE: The amount field is an Dec which implements the custom method
         signatures required by gogoproto.
    DenomAuthorityMetadata:
      type: object
      properties:
        admin:
          type: string
          description: Can be empty for no admin, or a valid bech32 address
      description: |-
        DenomAuthorityMetadata specifies metadata for addresses that have specific
         capabilities over a token factory denom. Right now there is only one Admin
         permission, but is planned to be extended to the future.
    FeePayContract:
      type: object
      properties:
        contractAddress:
          type: string
          description: The address of the contract.
        balance:
          type: string
          description: The ledger balance of the contract.
        walletLimit:
          type: string
          description: The number of times a wallet may interact with the contract.
      description: |-
        This defines the address, balance, and wallet limit
         of a fee pay contract.
    FeeShare:
      type: object
      properties:
        contractAddress:
          type: string
          description: |-
            contract_address is the bech32 address of a registered contract in string
             form
        deployerAddress:
          type: string
          description: |-
            deployer_address is the bech32 address of message sender. It must be the
             same as the contracts admin address.
        withdrawerAddress:
          type: string
          description: |-
            withdrawer_address is the bech32 address of account receiving the
             transaction fees.
      description: |-
        FeeShare defines an instance that organizes fee distribution conditions for
         the owner of a given smart contract
    GoogleProtobufAny:
      type: object
      properties:
        '@type':
          type: string
          description: The type of the serialized message.
      additionalProperties: true
      description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
    MsgCancelFeeShareResponse:
      type: object
      properties: {}
      description: MsgCancelFeeShareResponse defines the MsgCancelFeeShare response type
    MsgDistributeTokensResponse:
      type: object
      properties: {}
      description: MsgDistributeTokensResponse defines the MsgDistributeTokens response type
    MsgFundFeePayContractResponse:
      type: object
      properties: {}
      description: The response message for funding a fee pay contract.
    MsgRegisterClockContractResponse:
      type: object
      properties: {}
      description: |-
        MsgRegisterClockContractResponse defines the response structure for executing a
         MsgRegisterClockContract message.
    MsgRegisterFeePayContractResponse:
      type: object
      properties: {}
      description: The response message for registering a fee pay contract.
    MsgRegisterFeeShareResponse:
      type: object
      properties: {}
      description: MsgRegisterFeeShareResponse defines the MsgRegisterFeeShare response type
    MsgUnjailClockContractResponse:
      type: object
      properties: {}
      description: |-
        MsgUnjailClockContractResponse defines the response structure for executing a
         MsgUnjailClockContract message.
    MsgUnregisterClockContractResponse:
      type: object
      properties: {}
      description: |-
        MsgUnregisterClockContractResponse defines the response structure for executing a
         MsgUnregisterClockContract message.
    MsgUnregisterFeePayContractResponse:
      type: object
      properties: {}
      description: The response message for unregistering a fee pay contract.
    MsgUpdateFeePayContractWalletLimitResponse:
      type: object
      properties: {}
      description: The response message for updating a fee pay contract wallet limit.
    MsgUpdateFeeShareResponse:
      type: object
      properties: {}
      description: MsgUpdateFeeShareResponse defines the MsgUpdateFeeShare response type
    PageResponse:
      type: object
      properties:
        nextKey:
          type: string
          description: |-
            next_key is the key to be passed to PageRequest.key to
             query the next page most efficiently. It will be empty if
             there are no more results.
          format: bytes
        total:
          type: string
          description: |-
            total is total number of results available if PageRequest.count_total
             was set, its value is undefined otherwise
      description: |-
        PageResponse is to be embedded in gRPC response messages where the
         corresponding request message has used PageRequest.

          message SomeResponse {
                  repeated Bar results = 1;
                  PageResponse page = 2;
          }
    Params:
      type: object
      properties:
        contractGasLimit:
          type: string
          description: contract_gas_limit is the contract call gas limit
        sendEnabled:
          type: array
          items:
            $ref: '#/components/schemas/SendEnabled'
          description: |-
            Deprecated: Use of SendEnabled in params is deprecated.
             For genesis, use the newly added send_enabled field in the genesis object.
             Storage, lookup, and manipulation of this information is now in the keeper.

             As of cosmos-sdk 0.47, this only exists for backwards compatibility of genesis files.
        defaultSendEnabled:
          type: boolean
      description: Params defines the parameters for the bank module.
    QueryAnnualProvisionsResponse:
      type: object
      properties:
        annualProvisions:
          type: string
          description: annual_provisions is the current minting annual provisions value.
          format: bytes
      description: |-
        QueryAnnualProvisionsResponse is the response type for the
         Query/AnnualProvisions RPC method.
    QueryClockContractResponse:
      type: object
      properties:
        clockContract:
          allOf:
            - $ref: '#/components/schemas/ClockContract'
          description: contract is the clock contract.
      description: QueryClockContractResponse is the response type for the Query/ClockContract RPC method.
    QueryClockContractsResponse:
      type: object
      properties:
        clockContracts:
          type: array
          items:
            $ref: '#/components/schemas/ClockContract'
          description: clock_contracts are the clock contracts.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: QueryClockContractsResponse is the response type for the Query/ClockContracts RPC method.
    QueryDenomAuthorityMetadataResponse:
      type: object
      properties:
        authorityMetadata:
          $ref: '#/components/schemas/DenomAuthorityMetadata'
      description: |-
        QueryDenomAuthorityMetadataResponse defines the response structure for the
         DenomAuthorityMetadata gRPC query.
    QueryDenomsFromCreatorResponse:
      type: object
      properties:
        denoms:
          type: array
          items:
            type: string
      description: |-
        QueryDenomsFromCreatorRequest defines the response structure for the
         DenomsFromCreator gRPC query.
    QueryDeployerFeeSharesResponse:
      type: object
      properties:
        contractAddresses:
          type: array
          items:
            type: string
          description: |-
            contract_addresses is the slice of registered contract addresses for a
             deployer
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: |-
        QueryDeployerFeeSharesResponse is the response type for the
         Query/DeployerFeeShares RPC method.
    QueryFeePayContractResponse:
      type: object
      properties:
        feePayContract:
          allOf:
            - $ref: '#/components/schemas/FeePayContract'
          description: contract defines the fee pay contract
      description: QueryFeePayContractResponse defines the response for retrieving a single fee pay contract
    QueryFeePayContractUsesResponse:
      type: object
      properties:
        uses:
          type: string
          description: The number of uses on the fee pay contract by wallet
      description: The response for querying the number of uses on a fee pay contract by wallet
    QueryFeePayContractsResponse:
      type: object
      properties:
        feePayContracts:
          type: array
          items:
            $ref: '#/components/schemas/FeePayContract'
          description: A slice of all the stored fee pay contracts
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: The response for querying all fee pay contracts
    QueryFeePayWalletIsEligibleResponse:
      type: object
      properties:
        eligible:
          type: boolean
          description: The eligibility of the wallet for fee pay contract interactions
      description: The response for querying if a wallet is eligible for fee pay contract interactions
    QueryFeeShareResponse:
      type: object
      properties:
        feeshare:
          allOf:
            - $ref: '#/components/schemas/FeeShare'
          description: FeeShare is a stored Reveneue for the queried contract
      description: QueryFeeShareResponse is the response type for the Query/FeeShare RPC method.
    QueryFeeSharesResponse:
      type: object
      properties:
        feeshare:
          type: array
          items:
            $ref: '#/components/schemas/FeeShare'
          description: FeeShare is a slice of all stored Reveneue
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: |-
        QueryFeeSharesResponse is the response type for the Query/FeeShares RPC
         method.
    QueryGovernanceContractsResponse:
      type: object
      properties:
        contracts:
          type: array
          items:
            type: string
      description: QueryGovernanceContractsResponse
    QueryInflationResponse:
      type: object
      properties:
        inflation:
          type: string
          description: inflation is the current minting inflation value.
          format: bytes
      description: |-
        QueryInflationResponse is the response type for the Query/Inflation RPC
         method.
    QueryMinimumGasPricesResponse:
      type: object
      properties:
        minimumGasPrices:
          type: array
          items:
            $ref: '#/components/schemas/DecCoin'
      description: |-
        QueryMinimumGasPricesResponse is the response type for the
         Query/MinimumGasPrices RPC method.
    QueryParamsResponse:
      type: object
      properties:
        params:
          $ref: '#/components/schemas/Params'
          allOf:
            - $ref: '#/components/schemas/Params'
          description: params defines the parameters of the module.
      description: QueryParamsResponse is the response type for the Query/Params RPC method.
    QueryStakingContractsResponse:
      type: object
      properties:
        contracts:
          type: array
          items:
            type: string
      description: QueryStakingContractsResponse
    QueryTargetSupplyResponse:
      type: object
      properties:
        targetSupply:
          type: string
          description: target_supply is the target supply for this phase value.
          format: bytes
      description: |-
        QueryTargetSupplyResponse is the response type for the
         Query/TargetSupply RPC method.
    QueryWithdrawerFeeSharesResponse:
      type: object
      properties:
        contractAddresses:
          type: array
          items:
            type: string
          description: |-
            contract_addresses is the slice of registered contract addresses for a
             withdrawer
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: |-
        QueryWithdrawerFeeSharesResponse is the response type for the
         Query/WithdrawerFeeShares RPC method.
    Status:
      type: object
      properties:
        code:
          type: integer
          description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
          format: int32
        message:
          type: string
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
        details:
          type: array
          items:
            $ref: '#/components/schemas/GoogleProtobufAny'
          description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
    ABCIMessageLog:
      type: object
      properties:
        msgIndex:
          type: integer
          format: uint32
        log:
          type: string
        events:
          type: array
          items:
            $ref: '#/components/schemas/StringEvent'
          description: |-
            Events contains a slice of Event objects that were emitted during some
             execution.
      description: ABCIMessageLog defines a structure containing an indexed tx ABCI message log.
    ABCIQueryResponse:
      type: object
      properties:
        code:
          type: integer
          format: uint32
        log:
          type: string
        info:
          type: string
        index:
          type: string
        key:
          type: string
          format: bytes
        value:
          type: string
          format: bytes
        proofOps:
          $ref: '#/components/schemas/ProofOps'
        height:
          type: string
        codespace:
          type: string
      description: |-
        ABCIQueryResponse defines the response structure for the ABCIQuery gRPC query.

         Note: This type is a duplicate of the ResponseQuery proto type defined in
         Tendermint.
    AccountResponse:
      type: object
      properties:
        permission:
          $ref: '#/components/schemas/Permissions'
      description: AccountResponse is the response type for the Query/Account RPC method.
    AccountsResponse:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/GenesisAccountPermissions'
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: AccountsResponse is the response type for the Query/Accounts RPC method.
    AddressBytesToStringResponse:
      type: object
      properties:
        addressString:
          type: string
      description: |-
        AddressBytesToStringResponse is the response type for AddressString rpc method.

         Since: cosmos-sdk 0.46
    AddressStringToBytesResponse:
      type: object
      properties:
        addressBytes:
          type: string
          format: bytes
      description: |-
        AddressStringToBytesResponse is the response type for AddressBytes rpc method.

         Since: cosmos-sdk 0.46
    Attribute:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
      description: |-
        Attribute defines an attribute wrapper where the key and value are
         strings instead of raw bytes.
    AuthInfo:
      type: object
      properties:
        signerInfos:
          type: array
          items:
            $ref: '#/components/schemas/SignerInfo'
          description: |-
            signer_infos defines the signing modes for the required signers. The number
             and order of elements must match the required signers from TxBody's
             messages. The first element is the primary signer and the one which pays
             the fee.
        fee:
          allOf:
            - $ref: '#/components/schemas/Fee'
          description: |-
            Fee is the fee and gas limit for the transaction. The first signer is the
             primary signer and the one which pays the fee. The fee can be calculated
             based on the cost of evaluating the body and doing signature verification
             of the signers. This can be estimated via simulation.
        tip:
          allOf:
            - $ref: '#/components/schemas/Tip'
          description: |-
            Tip is the optional tip used for transactions fees paid in another denom.

             This field is ignored if the chain didn't enable tips, i.e. didn't add the
             `TipDecorator` in its posthandler.

             Since: cosmos-sdk 0.46
      description: |-
        AuthInfo describes the fee and signer modes that are used to sign a
         transaction.
    AuthnDescriptor:
      type: object
      properties:
        signModes:
          type: array
          items:
            $ref: '#/components/schemas/SigningModeDescriptor'
          description: sign_modes defines the supported signature algorithm
      description: |-
        AuthnDescriptor provides information on how to sign transactions without relying
         on the online RPCs GetTxMetadata and CombineUnsignedTxAndSignatures
    BaseAccount:
      type: object
      properties:
        address:
          type: string
        pubKey:
          $ref: '#/components/schemas/GoogleProtobufAny'
        accountNumber:
          type: string
        sequence:
          type: string
      description: |-
        BaseAccount defines a base account type. It contains all the necessary fields
         for basic account functionality. Any custom account type should extend this
         type for additional functionality (e.g. vesting).
    Bech32PrefixResponse:
      type: object
      properties:
        bech32Prefix:
          type: string
      description: |-
        Bech32PrefixResponse is the response type for Bech32Prefix rpc method.

         Since: cosmos-sdk 0.46
    Block:
      type: object
      properties:
        header:
          $ref: '#/components/schemas/Header'
        data:
          $ref: '#/components/schemas/Data'
        evidence:
          $ref: '#/components/schemas/EvidenceList'
        lastCommit:
          $ref: '#/components/schemas/Commit'
    BlockID:
      type: object
      properties:
        hash:
          type: string
          format: bytes
        partSetHeader:
          $ref: '#/components/schemas/PartSetHeader'
      description: BlockID
    BroadcastTxRequest:
      type: object
      properties:
        txBytes:
          type: string
          description: tx_bytes is the raw transaction.
          format: bytes
        mode:
          type: integer
          format: enum
      description: |-
        BroadcastTxRequest is the request type for the Service.BroadcastTxRequest
         RPC method.
    BroadcastTxResponse:
      type: object
      properties:
        txResponse:
          allOf:
            - $ref: '#/components/schemas/TxResponse'
          description: tx_response is the queried TxResponses.
      description: |-
        BroadcastTxResponse is the response type for the
         Service.BroadcastTx method.
    ChainDescriptor:
      type: object
      properties:
        id:
          type: string
          description: id is the chain id
      description: ChainDescriptor describes chain information of the application
    Class:
      type: object
      properties:
        id:
          type: string
          description: id defines the unique identifier of the NFT classification, similar to the contract address of ERC721
        name:
          type: string
          description: name defines the human-readable name of the NFT classification. Optional
        symbol:
          type: string
          description: symbol is an abbreviated name for nft classification. Optional
        description:
          type: string
          description: description is a brief description of nft classification. Optional
        uri:
          type: string
          description: uri for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional
        uriHash:
          type: string
          description: uri_hash is a hash of the document pointed by uri. Optional
        data:
          allOf:
            - $ref: '#/components/schemas/GoogleProtobufAny'
          description: data is the app specific metadata of the NFT class. Optional
      description: Class defines the class of the nft type.
    CodecDescriptor:
      type: object
      properties:
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/InterfaceDescriptor'
          description: interfaces is a list of the registerted interfaces descriptors
      description: CodecDescriptor describes the registered interfaces and provides metadata information on the types
    Coin:
      type: object
      properties:
        denom:
          type: string
        amount:
          type: string
      description: |-
        Coin defines a token with a denomination and an amount.

         NOTE: The amount field is an Int which implements the custom method
         signatures required by gogoproto.
    Commit:
      type: object
      properties:
        height:
          type: string
        round:
          type: integer
          format: int32
        blockId:
          $ref: '#/components/schemas/BlockID'
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/CommitSig'
      description: Commit contains the evidence that a block was committed by a set of validators.
    CommitSig:
      type: object
      properties:
        blockIdFlag:
          type: integer
          format: enum
        validatorAddress:
          type: string
          format: bytes
        timestamp:
          type: string
          format: date-time
        signature:
          type: string
          format: bytes
      description: CommitSig is a part of the Vote included in a Commit.
    CompactBitArray:
      type: object
      properties:
        extraBitsStored:
          type: integer
          format: uint32
        elems:
          type: string
          format: bytes
      description: |-
        CompactBitArray is an implementation of a space efficient bit array.
         This is used to ensure that the encoded data takes up a minimal amount of
         space after proto encoding.
         This is not thread safe, and is not intended for concurrent usage.
    ConfigResponse:
      type: object
      properties:
        minimumGasPrice:
          type: string
        pruningKeepRecent:
          type: string
        pruningInterval:
          type: string
        haltHeight:
          type: string
      description: ConfigResponse defines the response structure for the Config gRPC query.
    ConfigurationDescriptor:
      type: object
      properties:
        bech32AccountAddressPrefix:
          type: string
          description: bech32_account_address_prefix is the account address prefix
      description: ConfigurationDescriptor contains metadata information on the sdk.Config
    Consensus:
      type: object
      properties:
        block:
          type: string
        app:
          type: string
      description: |-
        Consensus captures the consensus rules for processing a block in the blockchain,
         including all blockchain data structures and the rules of the application's
         state transition machine.
    Data:
      type: object
      properties:
        txs:
          type: array
          items:
            type: string
            format: bytes
          description: |-
            Txs that will be applied by state @ block.Height+1.
             NOTE: not all txs here are valid.  We're just agreeing on the order first.
             This means that block.AppHash does not include these txs.
      description: Data contains the set of transactions included in the block
    DefaultNodeInfo:
      type: object
      properties:
        protocolVersion:
          $ref: '#/components/schemas/ProtocolVersion'
        defaultNodeId:
          type: string
        listenAddr:
          type: string
        network:
          type: string
        version:
          type: string
        channels:
          type: string
          format: bytes
        moniker:
          type: string
        other:
          $ref: '#/components/schemas/DefaultNodeInfoOther'
    DefaultNodeInfoOther:
      type: object
      properties:
        txIndex:
          type: string
        rpcAddress:
          type: string
    Delegation:
      type: object
      properties:
        delegatorAddress:
          type: string
          description: delegator_address is the encoded address of the delegator.
        validatorAddress:
          type: string
          description: validator_address is the encoded address of the validator.
        shares:
          type: string
          description: shares define the delegation shares received.
      description: |-
        Delegation represents the bond with tokens held by an account. It is
         owned by one delegator, and is associated with the voting power of one
         validator.
    DelegationDelegatorReward:
      type: object
      properties:
        validatorAddress:
          type: string
        reward:
          type: array
          items:
            $ref: '#/components/schemas/DecCoin'
      description: |-
        DelegationDelegatorReward represents the properties
         of a delegator's delegation reward.
    DelegationResponse:
      type: object
      properties:
        delegation:
          $ref: '#/components/schemas/Delegation'
        balance:
          $ref: '#/components/schemas/Coin'
      description: |-
        DelegationResponse is equivalent to Delegation except that it contains a
         balance in addition to shares which is more suitable for client responses.
    DenomOwner:
      type: object
      properties:
        address:
          type: string
          description: address defines the address that owns a particular denomination.
        balance:
          allOf:
            - $ref: '#/components/schemas/Coin'
          description: balance is the balance of the denominated coin for an account.
      description: |-
        DenomOwner defines structure representing an account that owns or holds a
         particular denominated token. It contains the account address and account
         balance of the denominated token.

         Since: cosmos-sdk 0.46
    Deposit:
      type: object
      properties:
        proposalId:
          type: string
          description: proposal_id defines the unique id of the proposal.
        depositor:
          type: string
          description: depositor defines the deposit addresses from the proposals.
        amount:
          type: array
          items:
            $ref: '#/components/schemas/Coin'
          description: amount to be deposited by depositor.
      description: |-
        Deposit defines an amount deposited by an account address to an active
         proposal.
    DisabledListResponse:
      type: object
      properties:
        disabledList:
          type: array
          items:
            type: string
      description: DisabledListResponse is the response type for the Query/DisabledList RPC method.
    DuplicateVoteEvidence:
      type: object
      properties:
        voteA:
          $ref: '#/components/schemas/Vote'
        voteB:
          $ref: '#/components/schemas/Vote'
        totalVotingPower:
          type: string
        validatorPower:
          type: string
        timestamp:
          type: string
          format: date-time
      description: DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes.
    Event:
      type: object
      properties:
        type:
          type: string
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/EventAttribute'
      description: |-
        Event allows application developers to attach additional information to
         ResponseFinalizeBlock and ResponseCheckTx.
         Later, transactions may be queried using these events.
    EventAttribute:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
        index:
          type: boolean
      description: EventAttribute is a single key-value pair, associated with an event.
    Evidence:
      type: object
      properties:
        duplicateVoteEvidence:
          $ref: '#/components/schemas/DuplicateVoteEvidence'
        lightClientAttackEvidence:
          $ref: '#/components/schemas/LightClientAttackEvidence'
    EvidenceList:
      type: object
      properties:
        evidence:
          type: array
          items:
            $ref: '#/components/schemas/Evidence'
    Fee:
      type: object
      properties:
        amount:
          type: array
          items:
            $ref: '#/components/schemas/Coin'
          description: amount is the amount of coins to be paid as a fee
        gasLimit:
          type: string
          description: |-
            gas_limit is the maximum gas that can be used in transaction processing
             before an out of gas error occurs
        payer:
          type: string
          description: |-
            if unset, the first signer is responsible for paying the fees. If set, the specified account must pay the fees.
             the payer must be a tx signer (and thus have signed this field in AuthInfo).
             setting this field does *not* change the ordering of required signers for the transaction.
        granter:
          type: string
          description: |-
            if set, the fee payer (either the first signer or the value of the payer field) requests that a fee grant be used
             to pay fees instead of the fee payer's own balance. If an appropriate fee grant does not exist or the chain does
             not support fee grants, this will fail
      description: |-
        Fee includes the amount of coins paid in fees and the maximum
         gas to be used by the transaction. The ratio yields an effective "gasprice",
         which must be above some miminum to be accepted into the mempool.
    GasInfo:
      type: object
      properties:
        gasWanted:
          type: string
          description: GasWanted is the maximum units of work we allow this tx to perform.
        gasUsed:
          type: string
          description: GasUsed is the amount of gas actually consumed.
      description: GasInfo defines tx execution gas context.
    GenesisAccountPermissions:
      type: object
      properties:
        address:
          type: string
        permissions:
          $ref: '#/components/schemas/Permissions'
      description: GenesisAccountPermissions is the account permissions for the circuit breaker in genesis
    GetAuthnDescriptorResponse:
      type: object
      properties:
        authn:
          allOf:
            - $ref: '#/components/schemas/AuthnDescriptor'
          description: authn describes how to authenticate to the application when sending transactions
      description: GetAuthnDescriptorResponse is the response returned by the GetAuthnDescriptor RPC
    GetBlockByHeightResponse:
      type: object
      properties:
        blockId:
          $ref: '#/components/schemas/BlockID'
        block:
          allOf:
            - $ref: '#/components/schemas/Block'
          description: 'Deprecated: please use `sdk_block` instead'
        sdkBlock:
          allOf:
            - $ref: '#/components/schemas/Block'
          description: 'Since: cosmos-sdk 0.47'
      description: GetBlockByHeightResponse is the response type for the Query/GetBlockByHeight RPC method.
    GetBlockWithTxsResponse:
      type: object
      properties:
        txs:
          type: array
          items:
            $ref: '#/components/schemas/Tx'
          description: txs are the transactions in the block.
        blockId:
          $ref: '#/components/schemas/BlockID'
        block:
          $ref: '#/components/schemas/Block'
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines a pagination for the response.
      description: |-
        GetBlockWithTxsResponse is the response type for the Service.GetBlockWithTxs
         method.

         Since: cosmos-sdk 0.45.2
    GetChainDescriptorResponse:
      type: object
      properties:
        chain:
          allOf:
            - $ref: '#/components/schemas/ChainDescriptor'
          description: chain describes application chain information
      description: GetChainDescriptorResponse is the response returned by the GetChainDescriptor RPC
    GetCodecDescriptorResponse:
      type: object
      properties:
        codec:
          allOf:
            - $ref: '#/components/schemas/CodecDescriptor'
          description: codec describes the application codec such as registered interfaces and implementations
      description: GetCodecDescriptorResponse is the response returned by the GetCodecDescriptor RPC
    GetConfigurationDescriptorResponse:
      type: object
      properties:
        config:
          allOf:
            - $ref: '#/components/schemas/ConfigurationDescriptor'
          description: config describes the application's sdk.Config
      description: GetConfigurationDescriptorResponse is the response returned by the GetConfigurationDescriptor RPC
    GetLatestBlockResponse:
      type: object
      properties:
        blockId:
          $ref: '#/components/schemas/BlockID'
        block:
          allOf:
            - $ref: '#/components/schemas/Block'
          description: 'Deprecated: please use `sdk_block` instead'
        sdkBlock:
          allOf:
            - $ref: '#/components/schemas/Block'
          description: 'Since: cosmos-sdk 0.47'
      description: GetLatestBlockResponse is the response type for the Query/GetLatestBlock RPC method.
    GetLatestValidatorSetResponse:
      type: object
      properties:
        blockHeight:
          type: string
        validators:
          type: array
          items:
            $ref: '#/components/schemas/Validator'
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines an pagination for the response.
      description: GetLatestValidatorSetResponse is the response type for the Query/GetValidatorSetByHeight RPC method.
    GetNodeInfoResponse:
      type: object
      properties:
        defaultNodeInfo:
          $ref: '#/components/schemas/DefaultNodeInfo'
        applicationVersion:
          $ref: '#/components/schemas/VersionInfo'
      description: GetNodeInfoResponse is the response type for the Query/GetNodeInfo RPC method.
    GetQueryServicesDescriptorResponse:
      type: object
      properties:
        queries:
          allOf:
            - $ref: '#/components/schemas/QueryServicesDescriptor'
          description: queries provides information on the available queryable services
      description: GetQueryServicesDescriptorResponse is the response returned by the GetQueryServicesDescriptor RPC
    GetSyncingResponse:
      type: object
      properties:
        syncing:
          type: boolean
      description: GetSyncingResponse is the response type for the Query/GetSyncing RPC method.
    GetTxDescriptorResponse:
      type: object
      properties:
        tx:
          allOf:
            - $ref: '#/components/schemas/TxDescriptor'
          description: |-
            tx provides information on msgs that can be forwarded to the application
             alongside the accepted transaction protobuf type
      description: GetTxDescriptorResponse is the response returned by the GetTxDescriptor RPC
    GetTxResponse:
      type: object
      properties:
        tx:
          allOf:
            - $ref: '#/components/schemas/Tx'
          description: tx is the queried transaction.
        txResponse:
          allOf:
            - $ref: '#/components/schemas/TxResponse'
          description: tx_response is the queried TxResponses.
      description: GetTxResponse is the response type for the Service.GetTx method.
    GetTxsEventResponse:
      type: object
      properties:
        txs:
          type: array
          items:
            $ref: '#/components/schemas/Tx'
          description: txs is the list of queried transactions.
        txResponses:
          type: array
          items:
            $ref: '#/components/schemas/TxResponse'
          description: tx_responses is the list of queried TxResponses.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: |-
            pagination defines a pagination for the response.
             Deprecated post v0.46.x: use total instead.
        total:
          type: string
          description: total is total number of results available
      description: |-
        GetTxsEventResponse is the response type for the Service.TxsByEvents
         RPC method.
    GetValidatorSetByHeightResponse:
      type: object
      properties:
        blockHeight:
          type: string
        validators:
          type: array
          items:
            $ref: '#/components/schemas/Validator'
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines an pagination for the response.
      description: GetValidatorSetByHeightResponse is the response type for the Query/GetValidatorSetByHeight RPC method.
    Grant:
      type: object
      properties:
        granter:
          type: string
          description: granter is the address of the user granting an allowance of their funds.
        grantee:
          type: string
          description: grantee is the address of the user being granted an allowance of another user's funds.
        allowance:
          allOf:
            - $ref: '#/components/schemas/GoogleProtobufAny'
          description: allowance can be any of basic, periodic, allowed fee allowance.
      description: Grant is stored in the KVStore to record a grant with full context
    GrantAuthorization:
      type: object
      properties:
        granter:
          type: string
        grantee:
          type: string
        authorization:
          $ref: '#/components/schemas/GoogleProtobufAny'
        expiration:
          type: string
          format: date-time
      description: |-
        GrantAuthorization extends a grant with both the addresses of the grantee and granter.
         It is used in genesis.proto and query.proto
    GroupInfo:
      type: object
      properties:
        id:
          type: string
          description: id is the unique ID of the group.
        admin:
          type: string
          description: admin is the account address of the group's admin.
        metadata:
          type: string
          description: |-
            metadata is any arbitrary metadata to attached to the group.
             the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1
        version:
          type: string
          description: |-
            version is used to track changes to a group's membership structure that
             would break existing proposals. Whenever any members weight is changed,
             or any member is added or removed this version is incremented and will
             cause proposals based on older versions of this group to fail
        totalWeight:
          type: string
          description: total_weight is the sum of the group members' weights.
        createdAt:
          type: string
          description: created_at is a timestamp specifying when a group was created.
          format: date-time
      description: GroupInfo represents the high-level on-chain information for a group.
    GroupMember:
      type: object
      properties:
        groupId:
          type: string
          description: group_id is the unique ID of the group.
        member:
          allOf:
            - $ref: '#/components/schemas/Member'
          description: member is the member data.
      description: GroupMember represents the relationship between a group and a member.
    GroupPolicyInfo:
      type: object
      properties:
        address:
          type: string
          description: address is the account address of group policy.
        groupId:
          type: string
          description: group_id is the unique ID of the group.
        admin:
          type: string
          description: admin is the account address of the group admin.
        metadata:
          type: string
          description: |-
            metadata is any arbitrary metadata attached to the group policy.
             the recommended format of the metadata is to be found here:
             https://docs.cosmos.network/v0.47/modules/group#decision-policy-1
        version:
          type: string
          description: |-
            version is used to track changes to a group's GroupPolicyInfo structure that
             would create a different result on a running proposal.
        decisionPolicy:
          allOf:
            - $ref: '#/components/schemas/GoogleProtobufAny'
          description: decision_policy specifies the group policy's decision policy.
        createdAt:
          type: string
          description: created_at is a timestamp specifying when a group policy was created.
          format: date-time
      description: GroupPolicyInfo represents the high-level on-chain information for a group policy.
    Header:
      type: object
      properties:
        version:
          allOf:
            - $ref: '#/components/schemas/Consensus'
          description: basic block info
        chainId:
          type: string
        height:
          type: string
        time:
          type: string
          format: date-time
        lastBlockId:
          allOf:
            - $ref: '#/components/schemas/BlockID'
          description: prev block info
        lastCommitHash:
          type: string
          description: hashes of block data
          format: bytes
        dataHash:
          type: string
          format: bytes
        validatorsHash:
          type: string
          description: hashes from the app output from the prev block
          format: bytes
        nextValidatorsHash:
          type: string
          format: bytes
        consensusHash:
          type: string
          format: bytes
        appHash:
          type: string
          format: bytes
        lastResultsHash:
          type: string
          format: bytes
        evidenceHash:
          type: string
          description: consensus info
          format: bytes
        proposerAddress:
          type: string
          description: |-
            proposer_address is the original block proposer address, formatted as a Bech32 string.
             In Tendermint, this type is `bytes`, but in the SDK, we convert it to a Bech32 string
             for better UX.
      description: Header defines the structure of a Tendermint block header.
    HistoricalInfo:
      type: object
      properties:
        header:
          $ref: '#/components/schemas/Header'
        valset:
          type: array
          items:
            $ref: '#/components/schemas/Validator'
      description: |-
        HistoricalInfo contains header and validator information for a given block.
         It is stored as part of staking module's state, which persists the `n` most
         recent HistoricalInfo
         (`n` is set by the staking module's `historical_entries` parameter).
    InterfaceAcceptingMessageDescriptor:
      type: object
      properties:
        fullname:
          type: string
          description: fullname is the protobuf fullname of the type containing the interface
        fieldDescriptorNames:
          type: array
          items:
            type: string
          description: |-
            field_descriptor_names is a list of the protobuf name (not fullname) of the field
             which contains the interface as google.protobuf.Any (the interface is the same, but
             it can be in multiple fields of the same proto message)
      description: |-
        InterfaceAcceptingMessageDescriptor describes a protobuf message which contains
         an interface represented as a google.protobuf.Any
    InterfaceDescriptor:
      type: object
      properties:
        fullname:
          type: string
          description: fullname is the name of the interface
        interfaceAcceptingMessages:
          type: array
          items:
            $ref: '#/components/schemas/InterfaceAcceptingMessageDescriptor'
          description: |-
            interface_accepting_messages contains information regarding the proto messages which contain the interface as
             google.protobuf.Any field
        interfaceImplementers:
          type: array
          items:
            $ref: '#/components/schemas/InterfaceImplementerDescriptor'
          description: interface_implementers is a list of the descriptors of the interface implementers
      description: InterfaceDescriptor describes the implementation of an interface
    InterfaceImplementerDescriptor:
      type: object
      properties:
        fullname:
          type: string
          description: fullname is the protobuf queryable name of the interface implementer
        typeUrl:
          type: string
          description: |-
            type_url defines the type URL used when marshalling the type as any
             this is required so we can provide type safe google.protobuf.Any marshalling and
             unmarshalling, making sure that we don't accept just 'any' type
             in our interface fields
      description: InterfaceImplementerDescriptor describes an interface implementer
    LightBlock:
      type: object
      properties:
        signedHeader:
          $ref: '#/components/schemas/SignedHeader'
        validatorSet:
          $ref: '#/components/schemas/ValidatorSet'
    LightClientAttackEvidence:
      type: object
      properties:
        conflictingBlock:
          $ref: '#/components/schemas/LightBlock'
        commonHeight:
          type: string
        byzantineValidators:
          type: array
          items:
            $ref: '#/components/schemas/Validator'
        totalVotingPower:
          type: string
        timestamp:
          type: string
          format: date-time
      description: LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client.
    ListAllInterfacesResponse:
      type: object
      properties:
        interfaceNames:
          type: array
          items:
            type: string
          description: interface_names is an array of all the registered interfaces.
      description: ListAllInterfacesResponse is the response type of the ListAllInterfaces RPC.
    ListImplementationsResponse:
      type: object
      properties:
        implementationMessageNames:
          type: array
          items:
            type: string
      description: |-
        ListImplementationsResponse is the response type of the ListImplementations
         RPC.
    Member:
      type: object
      properties:
        address:
          type: string
          description: address is the member's account address.
        weight:
          type: string
          description: weight is the member's voting weight that should be greater than 0.
        metadata:
          type: string
          description: metadata is any arbitrary metadata attached to the member.
        addedAt:
          type: string
          description: added_at is a timestamp specifying when a member was added.
          format: date-time
      description: |-
        Member represents a group member with an account address,
         non-zero weight, metadata and added_at timestamp.
    Metadata:
      type: object
      properties:
        chunkHashes:
          type: array
          items:
            type: string
            format: bytes
      description: Metadata contains SDK-specific snapshot metadata.
    ModeInfo:
      type: object
      properties:
        single:
          allOf:
            - $ref: '#/components/schemas/ModeInfo_Single'
          description: single represents a single signer
        multi:
          allOf:
            - $ref: '#/components/schemas/ModeInfo_Multi'
          description: multi represents a nested multisig signer
      description: ModeInfo describes the signing mode of a single or nested multisig signer.
    ModeInfo_Multi:
      type: object
      properties:
        bitarray:
          allOf:
            - $ref: '#/components/schemas/CompactBitArray'
          description: bitarray specifies which keys within the multisig are signing
        modeInfos:
          type: array
          items:
            $ref: '#/components/schemas/ModeInfo'
          description: |-
            mode_infos is the corresponding modes of the signers of the multisig
             which could include nested multisig public keys
      description: Multi is the mode info for a multisig public key
    ModeInfo_Single:
      type: object
      properties:
        mode:
          type: integer
          description: mode is the signing mode of the single signer
          format: enum
      description: |-
        Single is the mode info for a single signer. It is structured as a message
         to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the
         future
    Module:
      type: object
      properties:
        path:
          type: string
          description: module path
        version:
          type: string
          description: module version
        sum:
          type: string
          description: checksum
      description: Module is the type for VersionInfo
    ModuleVersion:
      type: object
      properties:
        name:
          type: string
          description: name of the app module
        version:
          type: string
          description: consensus version of the app module
      description: |-
        ModuleVersion specifies a module and its consensus version.

         Since: cosmos-sdk 0.43
    MsgDescriptor:
      type: object
      properties:
        msgTypeUrl:
          type: string
          description: msg_type_url contains the TypeURL of a sdk.Msg.
      description: MsgDescriptor describes a cosmos-sdk message that can be delivered with a transaction
    NFT:
      type: object
      properties:
        classId:
          type: string
          description: class_id associated with the NFT, similar to the contract address of ERC721
        id:
          type: string
          description: id is a unique identifier of the NFT
        uri:
          type: string
          description: uri for the NFT metadata stored off chain
        uriHash:
          type: string
          description: uri_hash is a hash of the document pointed by uri
        data:
          allOf:
            - $ref: '#/components/schemas/GoogleProtobufAny'
          description: data is an app specific data of the NFT. Optional
      description: NFT defines the NFT.
    PartSetHeader:
      type: object
      properties:
        total:
          type: integer
          format: uint32
        hash:
          type: string
          format: bytes
      description: PartsetHeader
    Permissions:
      type: object
      properties:
        level:
          type: integer
          description: level is the level of permissions granted to this account.
          format: enum
        limitTypeUrls:
          type: array
          items:
            type: string
          description: |-
            limit_type_urls is used with LEVEL_SOME_MSGS to limit the lists of Msg type
             URLs that the account can trip. It is an error to use limit_type_urls with
             a level other than LEVEL_SOME_MSGS.
      description: |-
        Permissions are the permissions that an account has to trip
         or reset the circuit breaker.
    Plan:
      type: object
      properties:
        name:
          type: string
          description: |-
            Sets the name for the upgrade. This name will be used by the upgraded
             version of the software to apply any special "on-upgrade" commands during
             the first BeginBlock method after the upgrade is applied. It is also used
             to detect whether a software version can handle a given upgrade. If no
             upgrade handler with this name has been set in the software, it will be
             assumed that the software is out-of-date when the upgrade Time or Height is
             reached and the software will exit.
        time:
          type: string
          description: |-
            Deprecated: Time based upgrades have been deprecated. Time based upgrade logic
             has been removed from the SDK.
             If this field is not empty, an error will be thrown.
          format: date-time
        height:
          type: string
          description: The height at which the upgrade must be performed.
        info:
          type: string
          description: |-
            Any application specific upgrade info to be included on-chain
             such as a git commit that validators could automatically upgrade to
        upgradedClientState:
          allOf:
            - $ref: '#/components/schemas/GoogleProtobufAny'
          description: |-
            Deprecated: UpgradedClientState field has been deprecated. IBC upgrade logic has been
             moved to the IBC module in the sub module 02-client.
             If this field is not empty, an error will be thrown.
      description: Plan specifies information about a planned upgrade and when it should occur.
    Pool:
      type: object
      properties:
        notBondedTokens:
          type: string
        bondedTokens:
          type: string
      description: |-
        Pool is used for tracking bonded and not-bonded token supply of the bond
         denomination.
    ProofOp:
      type: object
      properties:
        type:
          type: string
        key:
          type: string
          format: bytes
        data:
          type: string
          format: bytes
      description: |-
        ProofOp defines an operation used for calculating Merkle root
         The data could be arbitrary format, providing nessecary data
         for example neighbouring node hash
    ProofOps:
      type: object
      properties:
        ops:
          type: array
          items:
            $ref: '#/components/schemas/ProofOp'
      description: |-
        ProofOps is Merkle proof defined by the list of ProofOps.

         Note: This type is a duplicate of the ProofOps proto type defined in Tendermint.
    Proposal:
      type: object
      properties:
        proposalId:
          type: string
          description: proposal_id defines the unique id of the proposal.
        content:
          allOf:
            - $ref: '#/components/schemas/GoogleProtobufAny'
          description: content is the proposal's content.
        status:
          type: integer
          description: status defines the proposal status.
          format: enum
        finalTallyResult:
          allOf:
            - $ref: '#/components/schemas/TallyResult'
          description: |-
            final_tally_result is the final tally result of the proposal. When
             querying a proposal via gRPC, this field is not populated until the
             proposal's voting period has ended.
        submitTime:
          type: string
          description: submit_time is the time of proposal submission.
          format: date-time
        depositEndTime:
          type: string
          description: deposit_end_time is the end time for deposition.
          format: date-time
        totalDeposit:
          type: array
          items:
            $ref: '#/components/schemas/Coin'
          description: total_deposit is the total deposit on the proposal.
        votingStartTime:
          type: string
          description: voting_start_time is the starting time to vote on a proposal.
          format: date-time
        votingEndTime:
          type: string
          description: voting_end_time is the end time of voting on a proposal.
          format: date-time
      description: Proposal defines the core field members of a governance proposal.
    ProtocolVersion:
      type: object
      properties:
        p2p:
          type: string
        block:
          type: string
        app:
          type: string
    QueryAccountAddressByIDResponse:
      type: object
      properties:
        accountAddress:
          type: string
      description: |-
        QueryAccountAddressByIDResponse is the response type for AccountAddressByID rpc method

         Since: cosmos-sdk 0.46.2
    QueryAccountInfoResponse:
      type: object
      properties:
        info:
          allOf:
            - $ref: '#/components/schemas/BaseAccount'
          description: info is the account info which is represented by BaseAccount.
      description: |-
        QueryAccountInfoResponse is the Query/AccountInfo response type.

         Since: cosmos-sdk 0.47
    QueryAccountResponse:
      type: object
      properties:
        account:
          allOf:
            - $ref: '#/components/schemas/GoogleProtobufAny'
          description: account defines the account of the corresponding address.
      description: QueryAccountResponse is the response type for the Query/Account RPC method.
    QueryAccountsResponse:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/GoogleProtobufAny'
          description: accounts are the existing accounts
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: |-
        QueryAccountsResponse is the response type for the Query/Accounts RPC method.

         Since: cosmos-sdk 0.43
    QueryAllBalancesResponse:
      type: object
      properties:
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Coin'
          description: balances is the balances of all the coins.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: |-
        QueryAllBalancesResponse is the response type for the Query/AllBalances RPC
         method.
    QueryAllEvidenceResponse:
      type: object
      properties:
        evidence:
          type: array
          items:
            $ref: '#/components/schemas/GoogleProtobufAny'
          description: evidence returns all evidences.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: |-
        QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC
         method.
    QueryAllowanceResponse:
      type: object
      properties:
        allowance:
          allOf:
            - $ref: '#/components/schemas/Grant'
          description: allowance is a allowance granted for grantee by granter.
      description: QueryAllowanceResponse is the response type for the Query/Allowance RPC method.
    QueryAllowancesByGranterResponse:
      type: object
      properties:
        allowances:
          type: array
          items:
            $ref: '#/components/schemas/Grant'
          description: allowances that have been issued by the granter.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines an pagination for the response.
      description: |-
        QueryAllowancesByGranterResponse is the response type for the Query/AllowancesByGranter RPC method.

         Since: cosmos-sdk 0.46
    QueryAllowancesResponse:
      type: object
      properties:
        allowances:
          type: array
          items:
            $ref: '#/components/schemas/Grant'
          description: allowances are allowance's granted for grantee by granter.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines an pagination for the response.
      description: QueryAllowancesResponse is the response type for the Query/Allowances RPC method.
    QueryAppliedPlanResponse:
      type: object
      properties:
        height:
          type: string
          description: height is the block height at which the plan was applied.
      description: |-
        QueryAppliedPlanResponse is the response type for the Query/AppliedPlan RPC
         method.
    QueryAuthorityResponse:
      type: object
      properties:
        address:
          type: string
      description: |-
        QueryAuthorityResponse is the response type for Query/Authority

         Since: cosmos-sdk 0.46
    QueryBalanceResponse:
      type: object
      properties:
        balance:
          allOf:
            - $ref: '#/components/schemas/Coin'
          description: balance is the balance of the coin.
      description: QueryBalanceResponse is the response type for the Query/Balance RPC method.
    QueryClassResponse:
      type: object
      properties:
        class:
          allOf:
            - $ref: '#/components/schemas/Class'
          description: class defines the class of the nft type.
      description: QueryClassResponse is the response type for the Query/Class RPC method
    QueryClassesResponse:
      type: object
      properties:
        classes:
          type: array
          items:
            $ref: '#/components/schemas/Class'
          description: class defines the class of the nft type.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: QueryClassesResponse is the response type for the Query/Classes RPC method
    QueryCommunityPoolResponse:
      type: object
      properties:
        pool:
          type: array
          items:
            $ref: '#/components/schemas/DecCoin'
          description: pool defines community pool's coins.
      description: |-
        QueryCommunityPoolResponse is the response type for the Query/CommunityPool
         RPC method.
    QueryConstitutionResponse:
      type: object
      properties:
        constitution:
          type: string
      description: QueryConstitutionResponse is the response type for the Query/Constitution RPC method
    QueryCurrentPlanResponse:
      type: object
      properties:
        plan:
          allOf:
            - $ref: '#/components/schemas/Plan'
          description: plan is the current upgrade plan.
      description: |-
        QueryCurrentPlanResponse is the response type for the Query/CurrentPlan RPC
         method.
    QueryDelegationResponse:
      type: object
      properties:
        delegationResponse:
          allOf:
            - $ref: '#/components/schemas/DelegationResponse'
          description: delegation_responses defines the delegation info of a delegation.
      description: QueryDelegationResponse is response type for the Query/Delegation RPC method.
    QueryDelegationRewardsResponse:
      type: object
      properties:
        rewards:
          type: array
          items:
            $ref: '#/components/schemas/DecCoin'
          description: rewards defines the rewards accrued by a delegation.
      description: |-
        QueryDelegationRewardsResponse is the response type for the
         Query/DelegationRewards RPC method.
    QueryDelegationTotalRewardsResponse:
      type: object
      properties:
        rewards:
          type: array
          items:
            $ref: '#/components/schemas/DelegationDelegatorReward'
          description: rewards defines all the rewards accrued by a delegator.
        total:
          type: array
          items:
            $ref: '#/components/schemas/DecCoin'
          description: total defines the sum of all the rewards.
      description: |-
        QueryDelegationTotalRewardsResponse is the response type for the
         Query/DelegationTotalRewards RPC method.
    QueryDelegatorDelegationsResponse:
      type: object
      properties:
        delegationResponses:
          type: array
          items:
            $ref: '#/components/schemas/DelegationResponse'
          description: delegation_responses defines all the delegations' info of a delegator.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: |-
        QueryDelegatorDelegationsResponse is response type for the
         Query/DelegatorDelegations RPC method.
    QueryDelegatorUnbondingDelegationsResponse:
      type: object
      properties:
        unbondingResponses:
          type: array
          items:
            $ref: '#/components/schemas/UnbondingDelegation'
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: |-
        QueryUnbondingDelegatorDelegationsResponse is response type for the
         Query/UnbondingDelegatorDelegations RPC method.
    QueryDelegatorValidatorResponse:
      type: object
      properties:
        validator:
          allOf:
            - $ref: '#/components/schemas/Validator'
          description: validator defines the validator info.
      description: |-
        QueryDelegatorValidatorResponse response type for the
         Query/DelegatorValidator RPC method.
    QueryDelegatorValidatorsResponse:
      type: object
      properties:
        validators:
          type: array
          items:
            type: string
          description: validators defines the validators a delegator is delegating for.
      description: |-
        QueryDelegatorValidatorsResponse is the response type for the
         Query/DelegatorValidators RPC method.
    QueryDelegatorWithdrawAddressResponse:
      type: object
      properties:
        withdrawAddress:
          type: string
          description: withdraw_address defines the delegator address to query for.
      description: |-
        QueryDelegatorWithdrawAddressResponse is the response type for the
         Query/DelegatorWithdrawAddress RPC method.
    QueryDenomMetadataByQueryStringResponse:
      type: object
      properties:
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: metadata describes and provides all the client information for the requested token.
      description: |-
        QueryDenomMetadataByQueryStringResponse is the response type for the Query/DenomMetadata RPC
         method. Identical with QueryDenomMetadataResponse but receives denom as query string in request.
    QueryDenomMetadataResponse:
      type: object
      properties:
        metadata:
          allOf:
            - $ref: '#/components/schemas/Metadata'
          description: metadata describes and provides all the client information for the requested token.
      description: |-
        QueryDenomMetadataResponse is the response type for the Query/DenomMetadata RPC
         method.
    QueryDenomOwnersByQueryResponse:
      type: object
      properties:
        denomOwners:
          type: array
          items:
            $ref: '#/components/schemas/DenomOwner'
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: |-
        QueryDenomOwnersByQueryResponse defines the RPC response of a DenomOwnersByQuery RPC query.

         Since: cosmos-sdk 0.50.3
    QueryDenomOwnersResponse:
      type: object
      properties:
        denomOwners:
          type: array
          items:
            $ref: '#/components/schemas/DenomOwner'
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: |-
        QueryDenomOwnersResponse defines the RPC response of a DenomOwners RPC query.

         Since: cosmos-sdk 0.46
    QueryDenomsMetadataResponse:
      type: object
      properties:
        metadatas:
          type: array
          items:
            $ref: '#/components/schemas/Metadata'
          description: metadata provides the client information for all the registered tokens.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: |-
        QueryDenomsMetadataResponse is the response type for the Query/DenomsMetadata RPC
         method.
    QueryDepositResponse:
      type: object
      properties:
        deposit:
          allOf:
            - $ref: '#/components/schemas/Deposit'
          description: deposit defines the requested deposit.
      description: QueryDepositResponse is the response type for the Query/Deposit RPC method.
    QueryDepositsResponse:
      type: object
      properties:
        deposits:
          type: array
          items:
            $ref: '#/components/schemas/Deposit'
          description: deposits defines the requested deposits.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: QueryDepositsResponse is the response type for the Query/Deposits RPC method.
    QueryEvidenceResponse:
      type: object
      properties:
        evidence:
          allOf:
            - $ref: '#/components/schemas/GoogleProtobufAny'
          description: evidence returns the requested evidence.
      description: QueryEvidenceResponse is the response type for the Query/Evidence RPC method.
    QueryGranteeGrantsResponse:
      type: object
      properties:
        grants:
          type: array
          items:
            $ref: '#/components/schemas/GrantAuthorization'
          description: grants is a list of grants granted to the grantee.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines an pagination for the response.
      description: QueryGranteeGrantsResponse is the response type for the Query/GranteeGrants RPC method.
    QueryGranterGrantsResponse:
      type: object
      properties:
        grants:
          type: array
          items:
            $ref: '#/components/schemas/GrantAuthorization'
          description: grants is a list of grants granted by the granter.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines an pagination for the response.
      description: QueryGranterGrantsResponse is the response type for the Query/GranterGrants RPC method.
    QueryGrantsResponse:
      type: object
      properties:
        grants:
          type: array
          items:
            $ref: '#/components/schemas/Grant'
          description: authorizations is a list of grants granted for grantee by granter.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines an pagination for the response.
      description: QueryGrantsResponse is the response type for the Query/Authorizations RPC method.
    QueryGroupInfoResponse:
      type: object
      properties:
        info:
          allOf:
            - $ref: '#/components/schemas/GroupInfo'
          description: info is the GroupInfo of the group.
      description: QueryGroupInfoResponse is the Query/GroupInfo response type.
    QueryGroupMembersResponse:
      type: object
      properties:
        members:
          type: array
          items:
            $ref: '#/components/schemas/GroupMember'
          description: members are the members of the group with given group_id.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: QueryGroupMembersResponse is the Query/GroupMembersResponse response type.
    QueryGroupPoliciesByAdminResponse:
      type: object
      properties:
        groupPolicies:
          type: array
          items:
            $ref: '#/components/schemas/GroupPolicyInfo'
          description: group_policies are the group policies info with provided admin.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: QueryGroupPoliciesByAdminResponse is the Query/GroupPoliciesByAdmin response type.
    QueryGroupPoliciesByGroupResponse:
      type: object
      properties:
        groupPolicies:
          type: array
          items:
            $ref: '#/components/schemas/GroupPolicyInfo'
          description: group_policies are the group policies info associated with the provided group.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: QueryGroupPoliciesByGroupResponse is the Query/GroupPoliciesByGroup response type.
    QueryGroupPolicyInfoResponse:
      type: object
      properties:
        info:
          allOf:
            - $ref: '#/components/schemas/GroupPolicyInfo'
          description: info is the GroupPolicyInfo of the group policy.
      description: QueryGroupPolicyInfoResponse is the Query/GroupPolicyInfo response type.
    QueryGroupsByAdminResponse:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupInfo'
          description: groups are the groups info with the provided admin.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: QueryGroupsByAdminResponse is the Query/GroupsByAdminResponse response type.
    QueryGroupsByMemberResponse:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupInfo'
          description: groups are the groups info with the provided group member.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: QueryGroupsByMemberResponse is the Query/GroupsByMember response type.
    QueryGroupsResponse:
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/GroupInfo'
          description: '`groups` is all the groups present in state.'
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: |-
        QueryGroupsResponse is the Query/Groups response type.

         Since: cosmos-sdk 0.47.1
    QueryHistoricalInfoResponse:
      type: object
      properties:
        hist:
          allOf:
            - $ref: '#/components/schemas/HistoricalInfo'
          description: hist defines the historical info at the given height.
      description: |-
        QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC
         method.
    QueryMethodDescriptor:
      type: object
      properties:
        name:
          type: string
          description: name is the protobuf name (not fullname) of the method
        fullQueryPath:
          type: string
          description: |-
            full_query_path is the path that can be used to query
             this method via tendermint abci.Query
      description: |-
        QueryMethodDescriptor describes a queryable method of a query service
         no other info is provided beside method name and tendermint queryable path
         because it would be redundant with the grpc reflection service
    QueryModuleAccountByNameResponse:
      type: object
      properties:
        account:
          $ref: '#/components/schemas/GoogleProtobufAny'
      description: QueryModuleAccountByNameResponse is the response type for the Query/ModuleAccountByName RPC method.
    QueryModuleAccountsResponse:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/GoogleProtobufAny'
      description: |-
        QueryModuleAccountsResponse is the response type for the Query/ModuleAccounts RPC method.

         Since: cosmos-sdk 0.46
    QueryModuleVersionsResponse:
      type: object
      properties:
        moduleVersions:
          type: array
          items:
            $ref: '#/components/schemas/ModuleVersion'
          description: module_versions is a list of module names with their consensus versions.
      description: |-
        QueryModuleVersionsResponse is the response type for the Query/ModuleVersions
         RPC method.

         Since: cosmos-sdk 0.43
    QueryNFTResponse:
      type: object
      properties:
        nft:
          allOf:
            - $ref: '#/components/schemas/NFT'
          description: owner is the owner address of the nft
      description: QueryNFTResponse is the response type for the Query/NFT RPC method
    QueryNFTsResponse:
      type: object
      properties:
        nfts:
          type: array
          items:
            $ref: '#/components/schemas/NFT'
          description: NFT defines the NFT
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: QueryNFTsResponse is the response type for the Query/NFTs RPC methods
    QueryOwnerResponse:
      type: object
      properties:
        owner:
          type: string
          description: owner is the owner address of the nft
      description: QueryOwnerResponse is the response type for the Query/Owner RPC method
    QueryPoolResponse:
      type: object
      properties:
        pool:
          allOf:
            - $ref: '#/components/schemas/Pool'
          description: pool defines the pool info.
      description: QueryPoolResponse is response type for the Query/Pool RPC method.
    QueryProposalResponse:
      type: object
      properties:
        proposal:
          allOf:
            - $ref: '#/components/schemas/Proposal'
          description: proposal is the requested governance proposal.
      description: QueryProposalResponse is the response type for the Query/Proposal RPC method.
    QueryProposalsByGroupPolicyResponse:
      type: object
      properties:
        proposals:
          type: array
          items:
            $ref: '#/components/schemas/Proposal'
          description: proposals are the proposals with given group policy.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: QueryProposalsByGroupPolicyResponse is the Query/ProposalByGroupPolicy response type.
    QueryProposalsResponse:
      type: object
      properties:
        proposals:
          type: array
          items:
            $ref: '#/components/schemas/Proposal'
          description: proposals defines all the requested governance proposals.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: |-
        QueryProposalsResponse is the response type for the Query/Proposals RPC
         method.
    QueryRedelegationsResponse:
      type: object
      properties:
        redelegationResponses:
          type: array
          items:
            $ref: '#/components/schemas/RedelegationResponse'
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: |-
        QueryRedelegationsResponse is response type for the Query/Redelegations RPC
         method.
    QuerySendEnabledResponse:
      type: object
      properties:
        sendEnabled:
          type: array
          items:
            $ref: '#/components/schemas/SendEnabled'
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: |-
            pagination defines the pagination in the response. This field is only
             populated if the denoms field in the request is empty.
      description: |-
        QuerySendEnabledResponse defines the RPC response of a SendEnable query.

         Since: cosmos-sdk 0.47
    QueryServiceDescriptor:
      type: object
      properties:
        fullname:
          type: string
          description: fullname is the protobuf fullname of the service descriptor
        isModule:
          type: boolean
          description: is_module describes if this service is actually exposed by an application's module
        methods:
          type: array
          items:
            $ref: '#/components/schemas/QueryMethodDescriptor'
          description: methods provides a list of query service methods
      description: QueryServiceDescriptor describes a cosmos-sdk queryable service
    QueryServicesDescriptor:
      type: object
      properties:
        queryServices:
          type: array
          items:
            $ref: '#/components/schemas/QueryServiceDescriptor'
          description: query_services is a list of cosmos-sdk QueryServiceDescriptor
      description: QueryServicesDescriptor contains the list of cosmos-sdk queriable services
    QuerySigningInfoResponse:
      type: object
      properties:
        valSigningInfo:
          allOf:
            - $ref: '#/components/schemas/ValidatorSigningInfo'
          description: val_signing_info is the signing info of requested val cons address
      description: |-
        QuerySigningInfoResponse is the response type for the Query/SigningInfo RPC
         method
    QuerySigningInfosResponse:
      type: object
      properties:
        info:
          type: array
          items:
            $ref: '#/components/schemas/ValidatorSigningInfo'
          description: info is the signing info of all validators
        pagination:
          $ref: '#/components/schemas/PageResponse'
      description: |-
        QuerySigningInfosResponse is the response type for the Query/SigningInfos RPC
         method
    QuerySpendableBalanceByDenomResponse:
      type: object
      properties:
        balance:
          allOf:
            - $ref: '#/components/schemas/Coin'
          description: balance is the balance of the coin.
      description: |-
        QuerySpendableBalanceByDenomResponse defines the gRPC response structure for
         querying an account's spendable balance for a specific denom.

         Since: cosmos-sdk 0.47
    QuerySpendableBalancesResponse:
      type: object
      properties:
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Coin'
          description: balances is the spendable balances of all the coins.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: |-
        QuerySpendableBalancesResponse defines the gRPC response structure for querying
         an account's spendable balances.

         Since: cosmos-sdk 0.46
    QuerySubspacesResponse:
      type: object
      properties:
        subspaces:
          type: array
          items:
            $ref: '#/components/schemas/Subspace'
      description: |-
        QuerySubspacesResponse defines the response types for querying for all
         registered subspaces and all keys for a subspace.

         Since: cosmos-sdk 0.46
    QuerySupplyOfResponse:
      type: object
      properties:
        amount:
          allOf:
            - $ref: '#/components/schemas/Coin'
          description: amount is the supply of the coin.
      description: QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC method.
    QuerySupplyResponse:
      type: object
      properties:
        amount:
          type: string
          description: amount is the number of all NFTs from the given class
      description: QuerySupplyResponse is the response type for the Query/Supply RPC method
    QueryTallyResultResponse:
      type: object
      properties:
        tally:
          allOf:
            - $ref: '#/components/schemas/TallyResult'
          description: tally defines the requested tally.
      description: QueryTallyResultResponse is the response type for the Query/Tally RPC method.
    QueryTotalSupplyResponse:
      type: object
      properties:
        supply:
          type: array
          items:
            $ref: '#/components/schemas/Coin'
          description: supply is the supply of the coins
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: |-
            pagination defines the pagination in the response.

             Since: cosmos-sdk 0.43
      description: |-
        QueryTotalSupplyResponse is the response type for the Query/TotalSupply RPC
         method
    QueryUnbondingDelegationResponse:
      type: object
      properties:
        unbond:
          allOf:
            - $ref: '#/components/schemas/UnbondingDelegation'
          description: unbond defines the unbonding information of a delegation.
      description: |-
        QueryDelegationResponse is response type for the Query/UnbondingDelegation
         RPC method.
    QueryUpgradedConsensusStateResponse:
      type: object
      properties:
        upgradedConsensusState:
          type: string
          description: 'Since: cosmos-sdk 0.43'
          format: bytes
      description: |-
        QueryUpgradedConsensusStateResponse is the response type for the Query/UpgradedConsensusState
         RPC method.
    QueryValidatorCommissionResponse:
      type: object
      properties:
        commission:
          allOf:
            - $ref: '#/components/schemas/ValidatorAccumulatedCommission'
          description: commission defines the commission the validator received.
      description: |-
        QueryValidatorCommissionResponse is the response type for the
         Query/ValidatorCommission RPC method
    QueryValidatorDelegationsResponse:
      type: object
      properties:
        delegationResponses:
          type: array
          items:
            $ref: '#/components/schemas/DelegationResponse'
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: |-
        QueryValidatorDelegationsResponse is response type for the
         Query/ValidatorDelegations RPC method
    QueryValidatorDistributionInfoResponse:
      type: object
      properties:
        operatorAddress:
          type: string
          description: operator_address defines the validator operator address.
        selfBondRewards:
          type: array
          items:
            $ref: '#/components/schemas/DecCoin'
          description: self_bond_rewards defines the self delegations rewards.
        commission:
          type: array
          items:
            $ref: '#/components/schemas/DecCoin'
          description: commission defines the commission the validator received.
      description: QueryValidatorDistributionInfoResponse is the response type for the Query/ValidatorDistributionInfo RPC method.
    QueryValidatorOutstandingRewardsResponse:
      type: object
      properties:
        rewards:
          $ref: '#/components/schemas/ValidatorOutstandingRewards'
      description: |-
        QueryValidatorOutstandingRewardsResponse is the response type for the
         Query/ValidatorOutstandingRewards RPC method.
    QueryValidatorResponse:
      type: object
      properties:
        validator:
          allOf:
            - $ref: '#/components/schemas/Validator'
          description: validator defines the validator info.
      description: QueryValidatorResponse is response type for the Query/Validator RPC method
    QueryValidatorSlashesResponse:
      type: object
      properties:
        slashes:
          type: array
          items:
            $ref: '#/components/schemas/ValidatorSlashEvent'
          description: slashes defines the slashes the validator received.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: |-
        QueryValidatorSlashesResponse is the response type for the
         Query/ValidatorSlashes RPC method.
    QueryValidatorUnbondingDelegationsResponse:
      type: object
      properties:
        unbondingResponses:
          type: array
          items:
            $ref: '#/components/schemas/UnbondingDelegation'
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: |-
        QueryValidatorUnbondingDelegationsResponse is response type for the
         Query/ValidatorUnbondingDelegations RPC method.
    QueryValidatorsResponse:
      type: object
      properties:
        validators:
          type: array
          items:
            $ref: '#/components/schemas/Validator'
          description: validators contains all the queried validators.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: QueryValidatorsResponse is response type for the Query/Validators RPC method
    QueryVoteByProposalVoterResponse:
      type: object
      properties:
        vote:
          allOf:
            - $ref: '#/components/schemas/Vote'
          description: vote is the vote with given proposal_id and voter.
      description: QueryVoteByProposalVoterResponse is the Query/VoteByProposalVoter response type.
    QueryVoteResponse:
      type: object
      properties:
        vote:
          allOf:
            - $ref: '#/components/schemas/Vote'
          description: vote defines the queried vote.
      description: QueryVoteResponse is the response type for the Query/Vote RPC method.
    QueryVotesByProposalResponse:
      type: object
      properties:
        votes:
          type: array
          items:
            $ref: '#/components/schemas/Vote'
          description: votes are the list of votes for given proposal_id.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: QueryVotesByProposalResponse is the Query/VotesByProposal response type.
    QueryVotesByVoterResponse:
      type: object
      properties:
        votes:
          type: array
          items:
            $ref: '#/components/schemas/Vote'
          description: votes are the list of votes by given voter.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: QueryVotesByVoterResponse is the Query/VotesByVoter response type.
    QueryVotesResponse:
      type: object
      properties:
        votes:
          type: array
          items:
            $ref: '#/components/schemas/Vote'
          description: votes defines the queried votes.
        pagination:
          allOf:
            - $ref: '#/components/schemas/PageResponse'
          description: pagination defines the pagination in the response.
      description: QueryVotesResponse is the response type for the Query/Votes RPC method.
    Redelegation:
      type: object
      properties:
        delegatorAddress:
          type: string
          description: delegator_address is the bech32-encoded address of the delegator.
        validatorSrcAddress:
          type: string
          description: validator_src_address is the validator redelegation source operator address.
        validatorDstAddress:
          type: string
          description: validator_dst_address is the validator redelegation destination operator address.
        entries:
          type: array
          items:
            $ref: '#/components/schemas/RedelegationEntry'
          description: entries are the redelegation entries.
      description: |-
        Redelegation contains the list of a particular delegator's redelegating bonds
         from a particular source validator to a particular destination validator.
    RedelegationEntry:
      type: object
      properties:
        creationHeight:
          type: string
          description: creation_height  defines the height which the redelegation took place.
        completionTime:
          type: string
          description: completion_time defines the unix time for redelegation completion.
          format: date-time
        initialBalance:
          type: string
          description: initial_balance defines the initial balance when redelegation started.
        sharesDst:
          type: string
          description: shares_dst is the amount of destination-validator shares created by redelegation.
        unbondingId:
          type: string
          description: Incrementing id that uniquely identifies this entry
        unbondingOnHoldRefCount:
          type: string
          description: Strictly positive if this entry's unbonding has been stopped by external modules
      description: RedelegationEntry defines a redelegation object with relevant metadata.
    RedelegationEntryResponse:
      type: object
      properties:
        redelegationEntry:
          $ref: '#/components/schemas/RedelegationEntry'
        balance:
          type: string
      description: |-
        RedelegationEntryResponse is equivalent to a RedelegationEntry except that it
         contains a balance in addition to shares which is more suitable for client
         responses.
    RedelegationResponse:
      type: object
      properties:
        redelegation:
          $ref: '#/components/schemas/Redelegation'
        entries:
          type: array
          items:
            $ref: '#/components/schemas/RedelegationEntryResponse'
      description: |-
        RedelegationResponse is equivalent to a Redelegation except that its entries
         contain a balance in addition to shares which is more suitable for client
         responses.
    Result:
      type: object
      properties:
        data:
          type: string
          description: |-
            Data is any data returned from message or handler execution. It MUST be
             length prefixed in order to separate data from multiple message executions.
             Deprecated. This field is still populated, but prefer msg_response instead
             because it also contains the Msg response typeURL.
          format: bytes
        log:
          type: string
          description: Log contains the log information from message or handler execution.
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
          description: |-
            Events contains a slice of Event objects that were emitted during message
             or handler execution.
        msgResponses:
          type: array
          items:
            $ref: '#/components/schemas/GoogleProtobufAny'
          description: |-
            msg_responses contains the Msg handler responses type packed in Anys.

             Since: cosmos-sdk 0.46
      description: Result is the union of ResponseFormat and ResponseCheckTx.
    SendEnabled:
      type: object
      properties:
        denom:
          type: string
        enabled:
          type: boolean
      description: |-
        SendEnabled maps coin denom to a send_enabled status (whether a denom is
         sendable).
    SignedHeader:
      type: object
      properties:
        header:
          $ref: '#/components/schemas/Header'
        commit:
          $ref: '#/components/schemas/Commit'
    SignerInfo:
      type: object
      properties:
        publicKey:
          allOf:
            - $ref: '#/components/schemas/GoogleProtobufAny'
          description: |-
            public_key is the public key of the signer. It is optional for accounts
             that already exist in state. If unset, the verifier can use the required \
             signer address for this position and lookup the public key.
        modeInfo:
          allOf:
            - $ref: '#/components/schemas/ModeInfo'
          description: |-
            mode_info describes the signing mode of the signer and is a nested
             structure to support nested multisig pubkey's
        sequence:
          type: string
          description: |-
            sequence is the sequence of the account, which describes the
             number of committed transactions signed by a given address. It is used to
             prevent replay attacks.
      description: |-
        SignerInfo describes the public key and signing mode of a single top-level
         signer.
    SigningModeDescriptor:
      type: object
      properties:
        name:
          type: string
          description: name defines the unique name of the signing mode
        number:
          type: integer
          description: number is the unique int32 identifier for the sign_mode enum
          format: int32
        authnInfoProviderMethodFullname:
          type: string
          description: |-
            authn_info_provider_method_fullname defines the fullname of the method to call to get
             the metadata required to authenticate using the provided sign_modes
      description: |-
        SigningModeDescriptor provides information on a signing flow of the application
         NOTE(fdymylja): here we could go as far as providing an entire flow on how
         to sign a message given a SigningModeDescriptor, but it's better to think about
         this another time
    SimulateRequest:
      type: object
      properties:
        tx:
          allOf:
            - $ref: '#/components/schemas/Tx'
          description: |-
            tx is the transaction to simulate.
             Deprecated. Send raw tx bytes instead.
        txBytes:
          type: string
          description: |-
            tx_bytes is the raw transaction.

             Since: cosmos-sdk 0.43
          format: bytes
      description: |-
        SimulateRequest is the request type for the Service.Simulate
         RPC method.
    SimulateResponse:
      type: object
      properties:
        gasInfo:
          allOf:
            - $ref: '#/components/schemas/GasInfo'
          description: gas_info is the information about gas used in the simulation.
        result:
          allOf:
            - $ref: '#/components/schemas/Result'
          description: result is the result of the simulation.
      description: |-
        SimulateResponse is the response type for the
         Service.SimulateRPC method.
    StatusResponse:
      type: object
      properties:
        earliestStoreHeight:
          type: string
        height:
          type: string
        timestamp:
          type: string
          format: date-time
        appHash:
          type: string
          format: bytes
        validatorHash:
          type: string
          format: bytes
      description: StateResponse defines the response structure for the status of a node.
    StringEvent:
      type: object
      properties:
        type:
          type: string
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/Attribute'
      description: |-
        StringEvent defines en Event object wrapper where all the attributes
         contain key/value pairs that are strings instead of raw bytes.
    Subspace:
      type: object
      properties:
        subspace:
          type: string
        keys:
          type: array
          items:
            type: string
      description: |-
        Subspace defines a parameter subspace name and all the keys that exist for
         the subspace.

         Since: cosmos-sdk 0.46
    TallyResult:
      type: object
      properties:
        yes:
          type: string
          description: yes is the number of yes votes on a proposal.
        abstain:
          type: string
          description: abstain is the number of abstain votes on a proposal.
        no:
          type: string
          description: no is the number of no votes on a proposal.
        noWithVeto:
          type: string
          description: no_with_veto is the number of no with veto votes on a proposal.
      description: TallyResult defines a standard tally for a governance proposal.
    Tip:
      type: object
      properties:
        amount:
          type: array
          items:
            $ref: '#/components/schemas/Coin'
          description: amount is the amount of the tip
        tipper:
          type: string
          description: tipper is the address of the account paying for the tip
      description: |-
        Tip is the tip used for meta-transactions.

         Since: cosmos-sdk 0.46
    Tx:
      type: object
      properties:
        body:
          allOf:
            - $ref: '#/components/schemas/TxBody'
          description: body is the processable content of the transaction
        authInfo:
          allOf:
            - $ref: '#/components/schemas/AuthInfo'
          description: |-
            auth_info is the authorization related content of the transaction,
             specifically signers, signer modes and fee
        signatures:
          type: array
          items:
            type: string
            format: bytes
          description: |-
            signatures is a list of signatures that matches the length and order of
             AuthInfo's signer_infos to allow connecting signature meta information like
             public key and signing mode by position.
      description: Tx is the standard type used for broadcasting transactions.
    TxBody:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/GoogleProtobufAny'
          description: |-
            messages is a list of messages to be executed. The required signers of
             those messages define the number and order of elements in AuthInfo's
             signer_infos and Tx's signatures. Each required signer address is added to
             the list only the first time it occurs.
             By convention, the first required signer (usually from the first message)
             is referred to as the primary signer and pays the fee for the whole
             transaction.
        memo:
          type: string
          description: |-
            memo is any arbitrary note/comment to be added to the transaction.
             WARNING: in clients, any publicly exposed text should not be called memo,
             but should be called `note` instead (see https://github.com/cosmos/cosmos-sdk/issues/9122).
        timeoutHeight:
          type: string
          description: |-
            timeout is the block height after which this transaction will not
             be processed by the chain
        extensionOptions:
          type: array
          items:
            $ref: '#/components/schemas/GoogleProtobufAny'
          description: |-
            extension_options are arbitrary options that can be added by chains
             when the default options are not sufficient. If any of these are present
             and can't be handled, the transaction will be rejected
        nonCriticalExtensionOptions:
          type: array
          items:
            $ref: '#/components/schemas/GoogleProtobufAny'
          description: |-
            extension_options are arbitrary options that can be added by chains
             when the default options are not sufficient. If any of these are present
             and can't be handled, they will be ignored
      description: TxBody is the body of a transaction that all signers sign over.
    TxDecodeAminoRequest:
      type: object
      properties:
        aminoBinary:
          type: string
          format: bytes
      description: |-
        TxDecodeAminoRequest is the request type for the Service.TxDecodeAmino
         RPC method.

         Since: cosmos-sdk 0.47
    TxDecodeAminoResponse:
      type: object
      properties:
        aminoJson:
          type: string
      description: |-
        TxDecodeAminoResponse is the response type for the Service.TxDecodeAmino
         RPC method.

         Since: cosmos-sdk 0.47
    TxDecodeRequest:
      type: object
      properties:
        txBytes:
          type: string
          description: tx_bytes is the raw transaction.
          format: bytes
      description: |-
        TxDecodeRequest is the request type for the Service.TxDecode
         RPC method.

         Since: cosmos-sdk 0.47
    TxDecodeResponse:
      type: object
      properties:
        tx:
          allOf:
            - $ref: '#/components/schemas/Tx'
          description: tx is the decoded transaction.
      description: |-
        TxDecodeResponse is the response type for the
         Service.TxDecode method.

         Since: cosmos-sdk 0.47
    TxDescriptor:
      type: object
      properties:
        fullname:
          type: string
          description: |-
            fullname is the protobuf fullname of the raw transaction type (for instance the tx.Tx type)
             it is not meant to support polymorphism of transaction types, it is supposed to be used by
             reflection clients to understand if they can handle a specific transaction type in an application.
        msgs:
          type: array
          items:
            $ref: '#/components/schemas/MsgDescriptor'
          description: msgs lists the accepted application messages (sdk.Msg)
      description: TxDescriptor describes the accepted transaction type
    TxEncodeAminoRequest:
      type: object
      properties:
        aminoJson:
          type: string
      description: |-
        TxEncodeAminoRequest is the request type for the Service.TxEncodeAmino
         RPC method.

         Since: cosmos-sdk 0.47
    TxEncodeAminoResponse:
      type: object
      properties:
        aminoBinary:
          type: string
          format: bytes
      description: |-
        TxEncodeAminoResponse is the response type for the Service.TxEncodeAmino
         RPC method.

         Since: cosmos-sdk 0.47
    TxEncodeRequest:
      type: object
      properties:
        tx:
          allOf:
            - $ref: '#/components/schemas/Tx'
          description: tx is the transaction to encode.
      description: |-
        TxEncodeRequest is the request type for the Service.TxEncode
         RPC method.

         Since: cosmos-sdk 0.47
    TxEncodeResponse:
      type: object
      properties:
        txBytes:
          type: string
          description: tx_bytes is the encoded transaction bytes.
          format: bytes
      description: |-
        TxEncodeResponse is the response type for the
         Service.TxEncode method.

         Since: cosmos-sdk 0.47
    TxResponse:
      type: object
      properties:
        height:
          type: string
          description: The block height
        txhash:
          type: string
          description: The transaction hash.
        codespace:
          type: string
          description: Namespace for the Code
        code:
          type: integer
          description: Response code.
          format: uint32
        data:
          type: string
          description: Result bytes, if any.
        rawLog:
          type: string
          description: |-
            The output of the application's logger (raw string). May be
             non-deterministic.
        logs:
          type: array
          items:
            $ref: '#/components/schemas/ABCIMessageLog'
          description: The output of the application's logger (typed). May be non-deterministic.
        info:
          type: string
          description: Additional information. May be non-deterministic.
        gasWanted:
          type: string
          description: Amount of gas requested for transaction.
        gasUsed:
          type: string
          description: Amount of gas consumed by transaction.
        tx:
          allOf:
            - $ref: '#/components/schemas/GoogleProtobufAny'
          description: The request transaction bytes.
        timestamp:
          type: string
          description: |-
            Time of the previous block. For heights > 1, it's the weighted median of
             the timestamps of the valid votes in the block.LastCommit. For height == 1,
             it's genesis time.
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
          description: |-
            Events defines all the events emitted by processing a transaction. Note,
             these events include those emitted by processing all the messages and those
             emitted from the ante. Whereas Logs contains the events, with
             additional metadata, emitted only by processing the messages.

             Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
      description: |-
        TxResponse defines a structure containing relevant tx data and metadata. The
         tags are stringified and the log is JSON decoded.
    UnbondingDelegation:
      type: object
      properties:
        delegatorAddress:
          type: string
          description: delegator_address is the encoded address of the delegator.
        validatorAddress:
          type: string
          description: validator_address is the encoded address of the validator.
        entries:
          type: array
          items:
            $ref: '#/components/schemas/UnbondingDelegationEntry'
          description: entries are the unbonding delegation entries.
      description: |-
        UnbondingDelegation stores all of a single delegator's unbonding bonds
         for a single validator in an time-ordered list.
    UnbondingDelegationEntry:
      type: object
      properties:
        creationHeight:
          type: string
          description: creation_height is the height which the unbonding took place.
        completionTime:
          type: string
          description: completion_time is the unix time for unbonding completion.
          format: date-time
        initialBalance:
          type: string
          description: initial_balance defines the tokens initially scheduled to receive at completion.
        balance:
          type: string
          description: balance defines the tokens to receive at completion.
        unbondingId:
          type: string
          description: Incrementing id that uniquely identifies this entry
        unbondingOnHoldRefCount:
          type: string
          description: Strictly positive if this entry's unbonding has been stopped by external modules
      description: UnbondingDelegationEntry defines an unbonding object with relevant metadata.
    Validator:
      type: object
      properties:
        address:
          type: string
        pubKey:
          $ref: '#/components/schemas/GoogleProtobufAny'
        votingPower:
          type: string
        proposerPriority:
          type: string
      description: Validator is the type for the validator-set.
    ValidatorAccumulatedCommission:
      type: object
      properties:
        commission:
          type: array
          items:
            $ref: '#/components/schemas/DecCoin'
      description: |-
        ValidatorAccumulatedCommission represents accumulated commission
         for a validator kept as a running counter, can be withdrawn at any time.
    ValidatorOutstandingRewards:
      type: object
      properties:
        rewards:
          type: array
          items:
            $ref: '#/components/schemas/DecCoin'
      description: |-
        ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards
         for a validator inexpensive to track, allows simple sanity checks.
    ValidatorSet:
      type: object
      properties:
        validators:
          type: array
          items:
            $ref: '#/components/schemas/Validator'
        proposer:
          $ref: '#/components/schemas/Validator'
        totalVotingPower:
          type: string
    ValidatorSigningInfo:
      type: object
      properties:
        address:
          type: string
        startHeight:
          type: string
          description: Height at which validator was first a candidate OR was un-jailed
        indexOffset:
          type: string
          description: |-
            Index which is incremented every time a validator is bonded in a block and
             _may_ have signed a pre-commit or not. This in conjunction with the
             signed_blocks_window param determines the index in the missed block bitmap.
        jailedUntil:
          type: string
          description: Timestamp until which the validator is jailed due to liveness downtime.
          format: date-time
        tombstoned:
          type: boolean
          description: |-
            Whether or not a validator has been tombstoned (killed out of validator
             set). It is set once the validator commits an equivocation or for any other
             configured misbehavior.
        missedBlocksCounter:
          type: string
          description: |-
            A counter of missed (unsigned) blocks. It is used to avoid unnecessary
             reads in the missed block bitmap.
      description: |-
        ValidatorSigningInfo defines a validator's signing info for monitoring their
         liveness activity.
    ValidatorSlashEvent:
      type: object
      properties:
        validatorPeriod:
          type: string
        fraction:
          type: string
      description: |-
        ValidatorSlashEvent represents a validator slash event.
         Height is implicit within the store key.
         This is needed to calculate appropriate amount of staking tokens
         for delegations which are withdrawn after a slash has occurred.
    VersionInfo:
      type: object
      properties:
        name:
          type: string
        appName:
          type: string
        version:
          type: string
        gitCommit:
          type: string
        buildTags:
          type: string
        goVersion:
          type: string
        buildDeps:
          type: array
          items:
            $ref: '#/components/schemas/Module'
        cosmosSdkVersion:
          type: string
          description: 'Since: cosmos-sdk 0.43'
      description: VersionInfo is the type for the GetNodeInfoResponse message.
    Vote:
      type: object
      properties:
        proposalId:
          type: string
          description: proposal_id defines the unique id of the proposal.
        voter:
          type: string
          description: voter is the voter address of the proposal.
        option:
          type: integer
          description: |-
            Deprecated: Prefer to use `options` instead. This field is set in queries
             if and only if `len(options) == 1` and that option has weight 1. In all
             other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
          format: enum
        options:
          type: array
          items:
            $ref: '#/components/schemas/WeightedVoteOption'
          description: |-
            options is the weighted vote options.

             Since: cosmos-sdk 0.43
      description: |-
        Vote defines a vote on a governance proposal.
         A Vote consists of a proposal ID, the voter, and the vote option.
    WeightedVoteOption:
      type: object
      properties:
        option:
          type: integer
          description: option defines the valid vote options, it must not contain duplicate vote options.
          format: enum
        weight:
          type: string
          description: weight is the vote weight associated with the vote option.
      description: WeightedVoteOption defines a unit of vote for vote split.
tags:
  - name: Mint
    description: ""
  - name: Globalfee
    description: ""
  - name: Clock
    description: ""
  - name: Cwhooks
    description: ""
  - name: Drip
    description: ""
  - name: Feepay
    description: ""
  - name: Feeshare
    description: ""
  - name: Tokenfactory
    description: ""
  - name: Auth
    description: ""
  - name: Authz
    description: ""
  - name: Bank
    description: ""
  - name: Base
    description: ""
  - name: Circuit
    description: ""
  - name: Consensus
    description: ""
  - name: Distribution
    description: ""
  - name: Evidence
    description: ""
  - name: Feegrant
    description: ""
  - name: Gov
    description: ""
  - name: Group
    description: ""
  - name: Nft
    description: ""
  - name: Params
    description: ""
  - name: Slashing
    description: ""
  - name: Staking
    description: ""
  - name: Tx
    description: ""
  - name: Upgrade
    description: ""
